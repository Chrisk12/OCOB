%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: BSchoolLogo.eps
%%Creator: Adobe Illustrator(R) 14.0
%%For: Saenkhomor, Sompong
%%CreationDate: 3/23/11
%%BoundingBox: 0 0 267 261
%%HiResBoundingBox: 0 0 266.5000 260.5230
%%CropBox: 0 0 266.5000 260.5230
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 14.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 14.0.0 x367 R agm 4.4890 ct 5.1541%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                              
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.2.2-c063 53.352624, 2008/07/30-18:05:41        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:CreatorTool>Adobe Illustrator CS4</xmp:CreatorTool>
         <xmp:CreateDate>2011-03-23T11:30:58-04:00</xmp:CreateDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>252</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgA/AEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq+efz9/P39Hi48peUrj/AE/eLVdViP8AcdmhhYf7s7Mw+z0HxfZvx4upaZ5OgfKf5gye&#xA;p5tvX8Vt/wALeMZXPmWyHJJbXT7+75fVLaW44U5+kjPxrWleINK0ymWSMeZAZgErrnStUtY/UubO&#xA;eCOtOckbotfmwGCOWMtgQVIK0adqBtfrYtpTaf8ALRwb09jx+3Tj12w+JG6sWtFD5NDsVdirsVdi&#xA;qIGnagbX62LaU2n/AC0cG9PY8ft049dsh4kbqxaaKHyaHYq7FXYq7FXYq7FXYq7FXYq/VTFXYq7F&#xA;XYq7FXYq7FXYq7FXYq8C/P38+E0mO58peVpw2quGi1PUYztbAijRRMP93fzN+x/rfZycOG9y0ZMl&#xA;bB8rmtanMkhoSrzk/PzHdt4iL8IUGYOX6i5eP6Q9y/5xB/6a3/t3/wDYznD+1/8Akv8AO/3rsdF1&#xA;+D2Hy5d+b7+01iLzxpFnZ2KMy2ohcTrPakNy9WOsv7IHfev2dt+c1MMMJQOnnIy69KPkdvx1cqJk&#xA;b4g81FtDef8AOMNxa6NE8kNzNcRabBQ+oyvrbrClDvyIIGbziMe1QZncAX/yr3cerw7fjdilp/zi&#xA;2wht7TU/NdpZeYryNpLfShGJC3AVcKTLG7hf2mVKD3zPn7UbkwxSljHOX4G3zaxpO87sa8sf849e&#xA;btW8z6ro1/NFpltorKl9qTAyxtzXmnorWMvyQ8tytB1odsztV7QYceKM4gyM+Q/X3d3VrhppEkHa&#xA;kd5m/wCcd7qxsLLV/L+vW+vaJdXEVvPeQqo9ITTCH1F4SSpKiuaNxao8OpyrTe0InIwyQOOYBNHr&#xA;QuuQplPTULBsMgg/5xNuVv1gvfNEEUUqEw8LcmV3X7QEbSr8KihJB+jvmHL2sHDccZ+e3zpn+T35&#xA;qdj/AM4n6hIt3DeeZLeG/jLNaW8UJl5xVIjklq6MnMgigVqeJ6YZ+1cRRjjJj1N9eoG2/wBijRnv&#xA;Zx5d8mXN1/zjy3lTULuHS5opLu3vryc/uYfq2qymVySVBAEZpuAfEZq9RrRHtLxogzHpIA5m8Yr7&#xA;22MLxcJ2/teTeev+cetY0O30q80DUE8w2Wqzw2sLxoIiJLj+6aoeRGjf+flQfjnQ6H2hhlMo5I+H&#xA;KAJ7+XPoN/JxsmmIqt7Tz/oV2PiNNbzfZr5paD6yNJ9PbhXjWvqerw5f7s9L6MxP9FH8XhS8K64v&#xA;wKvytn+U6XulXlv/AJxo8y61or3rajDZX0V1LaTWEsbHg0E/pSN6qsQRQFhQb5kan2lxYp8PCZRM&#xA;Qb94sbMYaUkWjtO/5xjmuNU1ZbjzHDBoel8EGqmEfvZDCs0nwGbiiReoAWL/AMaVZPaYCEaxk5J/&#xA;w3y3odOZ9yRpNzvsEm89/kHdeVPJ8vmf9O2+pWqPGIVgiIEkc0gWN1k5su6kNtX5nrmToe3hqMwx&#xA;cBifM9zHJp+GN28nzoHGdirsVdirsVfqpirsVdirsVdirsVdirsVdirwf8/fz1bQxP5U8rzf7mGX&#xA;hqOoxmv1UEbxRkf7uI6n9j/W+zlYMF7nk4+XLWwfKzFmYsxJYmpJ3JJzMIcZaRkSyCReZm5a5cn/&#xA;AFPwjXNfm+ouZi+kPc/+cSLu1t/8V+vNHDy/R/H1GC1p9ZrSpzifa2BPhUL+r/eux0Z5vS/J+gXX&#xA;lXVdU1fW/P76xptwjlbO9k4w21ZA4cPLPNTivw7cR+GaTWagaiEYY8HBIdRzPyiG+EeEkmVoNfOv&#xA;liH8r31+1kT9Gx6vJerCpAdoV10yF1jPxfEvxgUy38llOr8M/VwV8fCrn9iPEHBfn+ldrHkxvM35&#xA;l+WPzE0vVbZ/L+nWZE0iSGrBDK6lCBxo/r0fkRQDBh1vgaXJppxPiSl+r9WyyhxTEwdlXS/P/lXz&#xA;lqPnHyjpl/DHdTK8NndchxufVtFgkeLp6npOlCR1FCNt8jl0GbTRxZpxNDcjuqV791pGSMyYhKNF&#xA;s4Pyw/LGy8ua/f28msahfIkNvDISCbi5QVTmFYpGg5MxUCu3hXJzTOu1Ry44ngjHn7o/p5BhEeHC&#xA;jzUfP2p27fnx5BeO7QwRQ3HJlkHBS6yK1SDQchQHJaDEf5Pz2N7H6FyH95FEaTqFkP8AnJLWpTcx&#xA;iA+X0USF14FhNb7VrSvXIZscv5MgK38X9EkxP70+5NdZ0qz80flnrXl2LVLeyudR1DUEt5ZJFC+p&#xA;+mJZIlNDWkjALt49DmPhyywaqGUxMhGEb/5Vi/kykOKBF9T96HvNb0T8rPI3lbQtdvYri5jntoZG&#xA;WrMqCUySzon2/Ti6Vp026nJwwZNfqMmTGCBR+6gPeUGQxxALIr221C41oeY9Ml8vRaP9VDprs9u1&#xA;xdigIYeqksCelx/a9T2pmHCUY4/CmMvHxfQDUflR3+DMg3Yqu9iXmHzjBf8A5Oea9SstRt3uJmu4&#xA;o7i1HoCVVkEDSRxvJM4EiqT9o9a7ZsNPozDW4oyiaHDz3ra9zQ5Ncp3jJtiH5Oav5X1/8ntV8j6p&#xA;qcejXLGdRczFUUxykSLKpkKK/Fqhl5VoO1a5se2MOXFrY6iETMbbe7amrBISxmJNJz+Zuj6Zov8A&#xA;zjjFpem6guqWVs1ssOoLTjNW65MycSw48iaUJ27nMbszNPL2mZyjwyN7d3pZ5YgYqG75bzvHXOxV&#xA;2KuxV2Kv1UxV2KuxV2KuxV2KuxV2KvDvz3/PZPL8c/lnyxOH11wUvr5DUWgPVEP+/v8AiH+t0y9P&#xA;p+Lc8nGzZq2HN8pyO8jtJIxd3JZ3Y1JJ3JJOZ5DiWsIyLJaciQljuvNy1a4Puv8AxEZrs31lzcX0&#xA;h7d/zipoWh6r/ij9KadbX/o/UPR+tQxzcOX1nlx5hqV4itM4z2qz5Mfh8EjG+Lka/mux0cQbsPUt&#xA;A0TyZ5tstWtdV8gJocFrIYRJeWcVt6yUP72CRVjkFKfaXptQ+Gh1GfPp5RMM/iE77SJryI3DkRjG&#xA;V3GnzXrX5Q6/ZeVLzzlbT21x5ZhldbeYSH1ni+tfVUfgFp8TUP2umdth7XxyzDAQRlI+H08TgSwk&#xA;R4uiJm/I/wDMSLStHu7eOG5h8wPEllbQTHmTNA1wrSBgiKFjiJYk7ZAduaYznE2DjuyR3GvvKfy8&#xA;qHmj9e/5xv8AzI0bSJdVIs71LZDLPb2kztOioOTHi8cYYgdlJynB7R6bLMQ9Ub7xt95TLSzAtm3n&#xA;38sP075e8p2Og6HZ6brGpFC1+0igzBLNpWDsqs2/Hlv3zWaDtPwsmWWScpQj07vVTdkxWAAN2IR/&#xA;84w/me8N1JxsVe3NIoWuCHnoK1i+DiB2/eFc2J9p9LYHq38uXv8A2W1flJpF5I/JHz55vjnnsbeK&#xA;ytLeR4JLm+dok9WM0dAqrJISp2Pw0rtXMrXdt6fTUJEyJ3qO+33MMeCUuSlrH5L/AJg6X5nsvLku&#xA;nie+1HkbGWBw0EqxisjCQ8eIQbtyAI+7JYe2dNkxHKJVGPO+Y/tWWCQNJ75l/wCcc/zK0jSZtXna&#xA;01BLeMy3EVtPI8yIi8mJEscYbiOyk5i6b2i0uSYgOKN8rG32Es56WYFrfLf/ADjt+ZOuaFFqMbWl&#xA;ha3SCe2tryZ0kkVl5KwSNJQvIfzkHHU+0WlxZDE8UiNiQOXzI+xY6aZFpfqn5EeftL0DUdavY7aO&#xA;DS+f1y3EvKZQlDUBVKkFGDijfZPjtl2Lt3T5MkccSbny22/HRidPIAnuZ35Lf82fyx8taaXsLHU9&#xA;B8y3VvHa6dLI3rR3F9GOIJCjjzVeLA8hX6a6rWjR67LL1SjkxA2elR/Hk3Y+PGB3FNPzJ8ufnL51&#xA;vLLygLDTdO0uBFvHhtJWMESgtFCZ5WRT2fgkadiabbY/Zup0Wlic3FOUjtuNz1ND5WSWWWOSfp2p&#xA;5N5+/Jnzt5JgiutUihubGZxEt5ZO0sYkYVVGDrG6k9qrTOh0HbODVEiBIkOhcbJglDmn2n/84zfm&#xA;deaSuoGOztZXQOmn3EzLckEVAICNGp9mcU70zEye02ljPh9R8wNvvv7GY0syLZh+Wfk+zh/JTz2u&#xA;s6PD+nNOk1SIPcQRvcQvFp8TKFdgWHFzVeJ9xmt7T1kjrsPBM+HLg5HY3MtuKH7uVjff7nlvmj8o&#xA;/NXlfy5ba7rj2tpFd8Pq9i0p+tszgHj6XHqimr77fPbN9pe18OfKcePiNda2+f3ONPDKIssJzaNT&#xA;6Jj/AD9/N9o1Y+YmBYA0FpY9/wDo3zfYey8coCRMtwO79TqsmunGRFDYrv8Alff5vf8AUxN/0iWH&#xA;/ZPln8kYu+X2fqYfyhPuH4+Lv+V9/m9/1MTf9Ilh/wBk+P8AJGLvl9n6l/lCfcPx8Xf8r7/N7/qY&#xA;m/6RLD/snx/kjF3y+z9S/wAoT7h+Pi7/AJX3+b3/AFMTf9Ilh/2T4/yRi75fZ+pf5Qn3D8fF3/K+&#xA;/wA3v+pib/pEsP8Asnx/kjF3y+z9S/yhPuH4+Lv+V9/m9/1MTf8ASJYf9k+P8kYu+X2fqX+UJ9w/&#xA;HxQ95+f35ttE8J8xPSRSrFbayRgGFDRkgVlPgQajKcnZ+KB2JJ/Hk2R1eSQ6PN5HeR2kkYu7ks7s&#xA;akk7kknJ0wtTIyJDJaRkCEhaRkWQYzrBrqc5/wAofqGazN9Zc7F9Ie//APOIP/TW/wDbv/7Gc4b2&#xA;v/yX+d/vXZaLr8HqPkqw/Nga1qY853dheaBKjrY28KL6lWk+HlxjQFfSqGDE70980WtyaPgj4AkM&#xA;nU/g97kYxOzxckm1vy1b+Z/yX1by95OMMqPd3EVjGrqsQ+r6qZSit0A4p8HtTtmTh1Jwa6OTPf0i&#xA;+/fHX9rGUeLGRH8bpxqtv5k0XQPI1jpkdtcarZXNvbTW1xKYopli0y4SZEkCuQ1FLKePbpmPiliy&#xA;5M0p2ISBNgWRc41syIIEQOf7F915e0nzPFrK6xo955eu1otzqUVx6CzH0gBNHLBIvqiNFArKntTq&#xA;BGOongMOCccg6Rq635EEbX5FJiJXYpygCb8uQDUAOAfH/cVLh6aj8f5QL/N/HRIvLGs6tL/zkL5x&#xA;0uW8mk02DTrV4LNnYxI3pWxqiE8VNZX6eOZWqwwHZuKYA4jM79ecv1BhCR8UjyTW6g0jXPIesafB&#xA;pba/DBqt/Dd6NbXP1N2lTUpHZWdXi40qJKFviH0ZjxlPFqISMvDJhEiRHFtwD3+5kaMSKvf9KhrG&#xA;qeY7TUPKmn2uj2dtqEUr/UbS61EvJLbxWrxzRiT0pH5Krq3Ilqkb1yeHFilHLIzkY1uRDkTIUav3&#xA;okSCBX2oq98t6P5osdcGraRd+WrpCy3OpR3HoJK3pb3CPBIomVVAqZUoenY0rhqZ4JQ4JxyjoKut&#xA;+W42+BSYCQNikN5cfVb/AEDyzYeZPLi3yPDELTVtNnWWKICCi3DljBJCHiPVC3h3GT1IhDJkliyc&#xA;O5uMhRO/LqDv30iNkAELdC0/Q7Xzh5p/L83E13p+p6dFqLWs80k7xCfnaXMXqSM8lOAhYVO3LDny&#xA;ZJYcepoCUZmNgVdeqJobd6xAEjHvDIINR0fzJr2r+X5Yg0nle7sLhGHQSNGtxER7qyspzDljngxw&#xA;yA/3sZD9BZgiRI7qSvy15s03zNeeetNhT6zdafdyWf1RZfSkkgS2WEBZl4sgedJqMD8JNa5kanSS&#xA;wRwyOwlEG6ve75e6vexhMS4gk1zeWnlfyLYW2peXU0Hy1He2bNbXmofWpIq3yTU4t63LdS/EPsK9&#xA;KHMmMDn1EjHJ4mXhluI1fpI8vdyYk8MdxQ97JPMOmyS+ctJ1i08uyapd21s4ttYXUGtoIA3LlG0A&#xA;fi/MN19Nq/7HbC0+QDBKEsnCCd48Fk+d+Xv+9nIeoGr+K3Q/MNlBYec9Yv7dIY9OvZZNUigcXI/0&#xA;bTbYyDkAgZgi0I8dsc+nkZYYRN8URw3tznKljLaRP42eR/8AOT/l6bVLDRPPOm3DXWkPAlu6gkxo&#xA;s372GZR2EnLi3+xzovZjUDHKenkKnd/LYj4frcbVxsCQ5PnfOycF6TB/cx/6o/VnYaX+6j/VH3PO&#xA;5/rl7yvy9qdirsVdirsVUppeI4r9r9WUZctbDm2QhfNCnMIuSFpGQIZLSMiUrSMiQyWkZEhIYrqv&#xA;/HQn/wBb+GarN9Zdhi+kK+j+ZPMWi+t+htVvNM+scfX+pzywepwrx5+my8uPI0r45iZtNiy1xxjK&#xA;u8A/e3RkRyKMuvP3nq7t5La78x6pcW0o4ywy3tw6MPBlZyCMqhoNPE2McAf6o/Uk5JHqVPQ/Onm3&#xA;Qbaa20XWLvT7ec8pYreV41LUpyoDs1B1G+Sz6LDlIM4RkR3hYzkORWXHm/zZc29tbXOtX81vZOkl&#xA;nDJdTOkLxqVRolLEIUUkKV6DDHSYYkkQiDLnsN/egzl3o3UvzI8/anYNp+oeYL65snHGSB53KuPB&#xA;9/jH+tXKsXZ2nhLijCIl7mRyyIolD/4687A2xHmHUq2f+8f+mT/ufgMf7v4/g+Alfh7bZP8AI4N/&#xA;RD1c/SN/ejxJd5UofN/m2HU59Vh1u/j1S5UR3N+l1MtxIigAK8obmwARdiewyR0eEwEDCPAOQoV8&#xA;kccru912l+cvNmk31xf6drF5a3l45ku545nDTOzci0pr8ZLGtWrgy6PDkiIyhExHLbl7u5ROQNgq&#xA;F95l8xX+px6pe6ndXGpQ8TDeyTSNMnE1Xg5PJaHpTJQ02OEeCMYiJ6VspkSbtMtU/Mfz7qtg2n6j&#xA;r99c2TrxkgedyrrttIK/H0/arlOLs7T45cUYREvcyOWRFErdI/MTz1o1iLDS9dvbSyAIS3jmcIgP&#xA;XgK/B/scObs/T5JcU4RMvciOWQFApfb+ZfMVtqkmrW+qXcGqTV9a/jnlS4fl9rlKrBzWnjl0tNil&#xA;DgMYmA6UK+SBI3d7qtr5w822d5c31prd/b3t6Qby6iupklmK9DK6sGelf2jkZ6PDKIiYRMY8hQoe&#xA;5ROQ3tDadrutaZqB1LT7+4tNQPItdwyukp57tV1IY8u/jk8mCE48Mogx7iNkCRBsIjXfNvmfzAYz&#xA;req3WoiKpiW4leRUJ6lVJ4rX2GQwaTFh/u4xjfcEymZcyi7H8wvPdhp406y8wahb2KrxS3juJVVF&#xA;3+FKN8I36DK59n6ecuKUImXfQSMkgKtA2nmfzJZ2Fzp1pq15b6feFzd2cVxKkMplUJIZI1YK/NRx&#xA;ao3GWz02KUhKUYmQ5GhY9yBMgVa4+a/NJ0n9DnWL46Rx4fo76zN9W4A8uPo8uFK70pg/KYuPj4I8&#xA;ffQv5rxmqvZKsyGL0mD+5j/1R+rOw0v91H+qPuedz/XL3lfl7U7FXYq7FVkknEUHXKsk65M4xtDn&#xA;fMUt4WEZAhkFpGRISGiMgQyWEZEpDRGRIZJbcaJazTPK7OGc1IBFP1Ziz00Sbb45yBSn+gLIftSf&#xA;eP6ZD8rHzZePJ36Cs/F/vH9MB00U+MWv0JZ+LfeP6YPy8U+MXfoaz/yvvH9MicAT4pd+h7PwP3j+&#xA;mDwQnxC1+irP+U4PCCfELv0XafyYPDCeMu/R1n/vsYOAJ4i76hZj/dQ/HI8ITxF31Kz/AN8r+P8A&#xA;XBwhNu+qWY/490/4b+uCkt/V7If8e0Z/4P8A5qwJd6NkP+PSI/8AB/8ANWC00uEdiP8AjyhP/Iz/&#xA;AJrxtaXAWA/48ID/AMjf+a8bWmwdPH/Sutz/AMjf+qmC1pcH04f9Ku1P/I7/AKq42tLxNpg/6VNo&#xA;f+R//VXFaZ3+U35YXP5ha6LS10W0t9KtiranqbC5KRIf2V/fDlI37K/SdsVSOD+5j/1R+rOw0v8A&#xA;dR/qj7nnc/1y95TDRtJvNX1W00uyAa7vZUggVjxUvIeK1J6bnLJzEYknkGuMSTQeif8AQt/5of8A&#xA;LNa/9JKZg/yph7z8nK/I5O53/Qt/5of8s1r/ANJKY/yph7z8l/I5O5pv+cb/AM0abWtrX/mJTAe1&#xA;MXQ/YkaHJ3KR/wCcavzSP/Hra/8ASSmUntDF3tg0mTua/wChafzT/wCWW1/6SUyP5/F3p/K5O5af&#xA;+caPzT/5ZbX/AKSUyP57H3p/Kz7mN+d/yl84+S7CC+12GGO3uZfQiMUqyHnxLbgey5PHnjM0GM8U&#xA;o808s/8AnHD8zry0gu4La1MNxGksRNwgPF1DLUfI5VLV4wabBp5kKh/5xl/NX/lltf8ApJTIfm8b&#xA;L8vNJfN35IeffKmhza1rEFvHYQsiSNHOsjVkYIvwj3OShnjI0ESxSiLLz8jLCGDRGQIZAvS9J/5x&#xA;0/MzVtJstVs7a2a0v4Irq2ZrhFYxzIJEJB6Hi2Y8s8QabhikUUf+cYPzX/5ZbT/pJTI+PFl4Ukn8&#xA;2fkP+YXlbQLrXtWt7dNPs/T9do50dh6sixLRR1+JxiMsSaCnGQGKeUvKWsebNdg0PR0SS/uFdolk&#xA;cRrSNC7VY/5K4yNC0RFvQD/zi7+bP/LJaf8ASUmVeLFs4C1/0K5+bX/LJaf9JSYDkiy4CtP/ADi3&#xA;+bX/ACyWn/SUmR8QJ4S0f+cW/wA2v+WS0/6So8HGE8Ja/wChWvzb/wCWS0/6So8HEE0Wj/ziz+bf&#xA;/LJaf9JUeRsJp5r5n8t6p5a1270PVVVL+yYJOqMHUFlDijDrswxSlRGRSGsCXYq7FXYqzn8p/wAp&#xA;9d/MPXRaWgNtpVsVbU9TZapEh/ZX+aRv2V+k7Yq+4/KflPQvKmhW+iaJbi2sbYbDq7uftSSN+07d&#xA;z/DFD4Lg/uY/9UfqzsNL/dR/qj7nnc/1y95ZX+V//kxvLX/bStv+Towav+6l/VK4P7yPvD7gzkHo&#xA;nYq7FXYq7FXYq8O/5yy/5Q7R/wDtof8AMiTNh2f9R9zh6zkHr3lf/lGdI/5grf8A5NLmFk+o+9yc&#xA;f0j3JnkGby7/AJyU/wDJS6l/xntf+T65k6T62jUfQ+NCM2pDgBaRkCEvvr8tP/Jc+Vf+2PYf9Qse&#xA;afJ9R97s4fSGSZBk82/5yM/8k15h/wCjP/qOgy3D9Qa8v0vnT/nGof8AIYNI/wCMV3/1DSZk5/pL&#xA;Ri+p9qZguW7FXYq7FXYq7FXwh+f4/wCQweZf+M8f/JiPLByYvPcBCWjkUtYEuxVnP5T/AJT67+Ye&#xA;ui0tAbbSrYq2p6my1SJD+yv80jfsr9J2xV9x+U/KeheVNCt9E0S3FtY2w2HV3c/akkb9p27n+GKE&#xA;3xV+ekH9zH/qj9Wdhpf7qP8AVH3PO5/rl7yyDyNqtlpPnLRdUvnKWdlewz3DgFiERwzEKNzsMOog&#xA;ZY5AcyGOKQEgT0L6g/6GK/Kv/q4zf9I03/NOc9/Jmbu+13H57H3q9j+f35Z317b2VvfzNcXUqQwq&#xA;baYAvIwVRUrtucjLs7MBZH2pGtxk09EzBct2Ksb86fmH5W8mx2kmv3D263pdbfhE8tTGFLV4A0+2&#xA;Muw6eeS+Ho1Zc0Yc2Lf9DHflT/1cZ/8ApFn/AOacv/k/L3NX5zG8t/P/APNTyZ5x8uadY6DdST3F&#xA;veetKrwyRAJ6TLWrgd2zL0emnjkTJx9TmjMCn0Z5X/5RnSP+YK3/AOTS5qsn1H3ufj+ke5M8gzeX&#xA;/wDOSf8A5KbUv+M9r/yfXMrR/wB40an6HxqRm1p1y0jAQyD75/LX/wAlz5V/7Y9h/wBQseaXL9R9&#xA;7s8f0j3Mjytm83/5yM/8k15h/wCjP/qOgy3B9Ya8v0l86f8AONY/5C/pP/GK7/6hpMys/wBJcfF9&#xA;T7TzAcx2KvHfzX/5yF/wB5oXQv0B+k+VtHc/Wfrfof3jMOPD0JenDryy2GOxbXKdFhv/AEOV/wB+&#xA;h/3Mf+zXD4PmjxGv+hy/+/P/AO5j/wBmuDwk+I1/0OZ/35//AHMf+zXB4aeN4P8AmB5r/wAXecNT&#xA;8x/VfqX6RkWT6r6nq8OMapTnxj5fZr9kZKkWx0jAlrIkMmjkWTOPyn/KfXfzC10WloDbaVbFW1PU&#xA;2WqRIf2V/mkb9lfpO2BX3H5T8p6F5U0K30TRLcW1jbDYdXdz9qSRv2nbuf4YoTfFXYq/PSD+5j/1&#xA;R+rOw0v91H+qPuedz/XL3lfl7U7FU48nf8pdof8A20LX/k8uVZ/ol7izx/UPe+8M416R2Kvn/wD5&#xA;y0/3h8tf8Zbv/iMObfsrnL4fpdd2h/D8XzgRm3IdeCtIyBCQX395X/5RrSf+YK3/AOTS5y+X6j73&#xA;e4/pHuTPIM2EfnN5T1jzX5BvNF0hEe+mlgeNZHCLSOVWb4j7DL9NkEJ2WrPAyjQfOf8A0LL+an/L&#xA;La/9JKZsDq8bhfl5tH/nGT81f+WW1/6SUwfm8afy831Z5M0y70nyfoWl3gC3dhp9pa3CqeSiSGBI&#xA;3AI6jkuazIbkT5ufAUAE4yDJ5v8A85F/+Sb8w/8ARn/1HQZdp/rDXm+kvnX/AJxr/wDJv6T/AMYr&#xA;v/qGkzL1H0FxsP1B9pZrnNdir54/Pj8lPPfnLzwusaHBBJZCzhgLSzLG3NGcn4T/AKwy/HMAbtM4&#xA;El5wf+cXfzZ/5ZLT/pKTJ+LFHAWj/wA4ufm1/wAslp/0lJkfECeAqc//ADjD+a8MMk0lraCOJS7k&#xA;XKHZRU4OMJ4S8lIwlDWRLILSMiyZx+VH5Ua5+YWuC0tAbbSrYq2p6ky1SJD+yv8ANI37K/SdsiUh&#xA;9w+U/KeheVNCt9E0S2FtY2w2HV3c/akkb9p27n+GRSm+KuxV2Kvz0g/uY/8AVH6s7DS/3Uf6o+55&#xA;3P8AXL3lfl7U7FU48nf8pdof/bQtf+Ty5Vn+iXuLPH9Q977wzjXpHYq8A/5yz/3i8tf8Zbv/AIjD&#xA;m47J5y+H6XW9ofw/H9D5xIzcEOuWkZEhkH355Y/5RrSf+YK3/wCTS5ymX6j73fY/pHuTPIM3Yq7F&#xA;XYq7FXYq84/5yK/8k55g/wCjP/qOgy7T/WGrN9JfO3/ONg/5C9pP/GK7/wCoaTMzUfQXGw/UH2hm&#xA;tc52KuxV2KuxVC6t/wAcq9/4wS/8QOIUvzdOZRDQ0RkSlkX5e+TpPN/nDTNAE31aO9l4S3NOXBFU&#xA;u1B3bipp74DE1fRkCLp96eVPKmh+VdDt9E0S3FtY2w2HV3c/akkb9p27n+GUNib4q7FXYq7FX56Q&#xA;/wBzH/qj9Wdhpv7qP9Ufc87n+uXvK/L2p2Kpx5O/5S7Q/wDtoWv/ACeXKs/0S9xZ4/qHvfeGca9I&#xA;7FXgP/OWX+8Xlr/jLd/8Rizc9kc5fD9Lre0f4fj+h85EZuSHWrSMiQl99+WP+Ua0n/mCt/8Ak0uc&#xA;nl+s+96DH9I9yZZWzSzzJ5m0Ty1pMmra3c/VNPhZVkn4SSULsFX4YldtyfDJ48ZmaHNjOYiLLDf+&#xA;hhfyf/6v/wD06Xv/AFQy/wDJ5e77mr8zj73f9DDfk9/1f/8Ap0vf+qGD8nl7vuX8zDvZ7puo2ep6&#xA;da6lZSerZXsMdxay0ZecUqh0biwVhVWBoRXMeQINFuBsWiMCXnH/ADkT/wCSc8wf9Gf/AFHQZfpv&#xA;rDVn+gvnf/nG3/yb2k/8Yrv/AKhpMzNSPQXFwfUH2fmsc92KvH/zW/5yD/wD5oXQv0B+kq20dz9Y&#xA;+t+h/eMw48PQl6cOvLL8eHiF21Ty0aYb/wBDj/8Afof9zH/s1yX5fzY+N5Nf9Dkf9+h/3Mf+zXB4&#xA;HmnxvJRvP+cwvrFpNb/4R4+tG0fL9I1pyBFafVffB4PmnxHzcRlhYKtraPcSUGyj7TeGX6fTSyyo&#xA;cmrNnEB5vU/yLiji/NHy6iCiiaT/AJMSZndpYowwCMeV/rcXRzMspJ7n2lnPu3dirsVdirsVfnpB&#xA;/cx/6o/VnYaX+6j/AFR9zzuf65e8r8vanYqnHk7/AJS7Q/8AtoWv/J5cqz/RL3Fnj+oe994Zxr0j&#xA;sVeBf85Y/wC8Xlr/AIyXf/EYs3XY/OXw/S6ztL+H4/ofORGboh1gK0jIkMn315Y/5RrSf+YO3/5N&#xA;LnI5frPvL0OP6R7kyytm8x/5yP8A/JUaj/xmtf8Ak+uZmg/vQ42r+h8dEZvCHVrSMgQl95flt/5L&#xA;vyt/2yLD/qGjzn831y95dzi+ke5keVM3nH/ORP8A5JzzB/0Z/wDUdBl+l/vA05/oL54/5xuH/IXd&#xA;J/4xXf8A1DSZnar6C4uD6g+zs1TsHYq+P/8AnKv/AMmen/bOt/8AicmZ2n+lxM31PGyMuawWiMgQ&#xA;yWkZEsgVS2tXneg2Ufabwy7BpzkNDk15cwgPNOYokiQIgoozfY8YgKDqZzMjZZ3+SP8A5NXy9/xm&#xA;k/5MSZr+1v7of1v1uZ2f/efB9n5zjuXYq7FXYq7FX56Qf3Mf+qP1Z2Gl/uo/1R9zzuf65e8r8van&#xA;YqnHk7/lLtD/AO2ha/8AJ5cqz/RL3Fnj+oe994Zxr0jsVeBf85Y/7xeWv+Ml3/xGLN12Nzl8P0us&#xA;7S/h+P6Hzoc3hdWtIyJDIF98eWP+Ub0n/mDt/wDk0ucfl+s+8vRYvpHuTLK2bzH/AJyP/wDJUaj/&#xA;AMZrX/k+uZug/vQ4ur+h8dkZvSHVNEZEhk+8fy3/APJd+Vv+2RYf9Q0ec5n+uXvLucX0j3Miypse&#xA;c/8AORH/AJJ3zB/0Z/8AUbBmRpf7wfjo06j6C+eP+cbx/wAhd0n/AIxXf/UNJmdqv7suJp/rD7Nz&#xA;UuxdiqCvND0W9l9a80+2uZqBfUmhjkag6CrAmmESIQQFD/Cvlf8A6s9j/wBI0X/NOHiPevCHf4V8&#xA;r/8AVnsf+kaH/mnHiPevCHf4U8r/APVnsf8ApGh/5pwcRXhDxP8A5yg0jSrDRNDaxsoLUvczBzBE&#xA;kZIEY68QK5ueyJEmTre0QKD53zeurZz+SP8A5NXy9/xmk/5MSZq+1v7of1v1ud2f/efB9n5zjuXY&#xA;q7FXYq7FX56Qf3Mf+qP1Z2Gl/uo/1R9zzuf65e8r8vanYqmvlSaGDzRo80zrFDFfWzyyuQqqqzKW&#xA;ZmOwAHU5XmFwPuLLGfUPe+0v+Vi/l9/1M+k/9J1t/wA15yf5XL/Nl8i9B48P5w+bv+Vi/l9/1M+k&#xA;/wDSdbf814/lcv8ANl8ivjw/nD5vEv8AnJvzJ5d1i08vrpGqWeotDJdGYWk8U5QMsXHl6bNStDSu&#xA;bfsrFOJlxAjlz+LrtfOMuGjfN4Lm5dc4jAVfa/l38wPIUPl/TIpfMmlRyx2kCyRte26srLGoIIL1&#xA;BBzk8unycR9MufcXf480OEbjl3ph/wArG/L3/qZ9J/6Trb/mvK/y2T+bL5Fn40P5w+bzv8/POXlD&#xA;VPy0v7PTdc0++u3mtylvbXUE0hCzKSQiMzbDMzQ4ZxygkEfBx9VkiYbEPlQjN0Q6xaRkSGT7S8ge&#xA;f/Ilr5E8uW1z5j0uC5g0uyjngkvbdHR0t0VkdWcFWUihBzns2GZnL0nmejt8WWPCNxyT7/lZH5d/&#xA;9TTpH/Sfbf8AVTK/An/NPyZ+LHvDAfz287eTNT/KrXLHTtf069vZvqvpWtvdwSyvxvIWbiiOzGiq&#xA;SaDpl+mxSGQEgtWfJEwNEPCvyC1TTNL/ADR0y91O7hsbOOO5ElzcyJDEpa3dVq7lVFSaDfM3VRJg&#xA;QHFwECYt9Zf8rK/Lr/qatH/6T7X/AKqZqvCn3H5Ow8SPeHf8rK/Ln/qatH/6T7X/AKqY+FPuK+JH&#xA;vDX/ACsv8uf+pq0f/pPtf+qmDwpdxXjj3h3/ACsv8uP+pq0f/pPtf+qmPhy7injj3rl/Mj8u2+z5&#xA;p0hqdaX9sf8AmZko4Mh5RJ+DE5YDmQ3/AMrF/L7/AKmfSf8ApOtv+a8l+Vy/zZfIo8eH84fN4z/z&#xA;kx5m8t6xo2iR6Rq1nqMkVxK0qWlxFOVBQAFhGzUGbXsrFOMpcQI94dfr8kZAUQXz9m7dazn8kf8A&#xA;yavl7/jNJ/yYkzV9rf3Q/rfrc7s/+8+D7PznHcuxV2KuxV2Kvz0g/uY/9UfqzsNL/dR/qj7nnc/1&#xA;y95TLQdKl1jXNO0mJ1il1G5htI5GqVVp5BGGNN6AtlmSfDEy7hbCEeIgd72P/oVPzJ/1fLP/AICX&#xA;+mav+WIfzS538nS7w7/oVPzJ/wBXyz/4CX+mP8sQ/mlf5Ol3h3/QqfmT/q+Wf/AS/wBMf5Yh/NK/&#xA;ydLvC1/+cVPM4UlNasmbsCkoH3gH9WP8sQ/mlf5On3hhXnP8lvPnlO3e8vbRLvTo95L2yYyxoPFw&#xA;Qkij3K098y8Gux5DQNHzcfLpZw3I2YJmY472fSP+cZPMGp6TZalHrNpHHe28VykbJISolQOAaDqO&#xA;WaqfasIyIo7OdDQSkAbG6KP/ADil5k/6vln/AMi5f6ZD+V4fzSy/k+feGv8AoVHzJ/1fLP8A5Fy/&#xA;0yP8rQ7in+T5d4a/6FQ8yf8AV8s/+Rcv9MH8qw7in8hLvCA1/wD5xl8waPoWo6vLrNpLFp1rNdyR&#xA;KkgZlgjaQqKilSFww7RjKQFHdEtHKIJsbPFyMzyHFCY+XvLOveY9STTtEspb68ff04hsq9OTsaKi&#xA;/wCUxAyrJOMRZNNkImRoPYtC/wCcTvMNzEsmt61b6exAPoW8bXTivVWYtCoPy5DNdPtCPQW5cdHL&#xA;qaZB/wBCj6HwofMNzzp19COlfly/jlX8oHubPyfmkWs/84kazFGW0bX7e7alRFdwvb/RzRp/1DJR&#xA;14PMIOkPQvIfN/5feb/KNwIdf02S1VzSG5FJIJO/wSoWQmnatR3GZMMkZ8i0SgY80x/LT8qta/MC&#xA;4v4NLu7a1bT0jeU3JkAYSlgOPBX/AJchmyiHNljxmXJnn/QpHnj/AKu+mf8ABXH/AFSzG/Nx7i3f&#xA;lpNf9Cj+dyd9X0ynejXH/VLEaqHmn8vLyRkf/OKfnGNQq6rpoA/yp/8AqlmfDtTFEUBL7P1uJLQ5&#xA;CbJC7/oVfzp/1ddN/wCCn/6pZL+V8fdL7P1o/k+feGG/mP8AlNrfkOKwk1K7trkag0ixC2MhKmIK&#xA;Ty5qn8+Zel1kc10Ds4+fTyx1fVg+ZbQzn8kf/Jq+Xv8AjNJ/yYkzV9rf3Q/rfrc7s/8AvPg+z85x&#xA;3LsVdirsVdir89IP7mP/AFR+rOw0v91H+qPuedz/AFy95ZJ+XX/kwfLH/bWsf+olMdV/dS/qn7lw&#xA;fXH3h9z5x70ShfX9hp9pJeX9zFaWkQBluJ3WKNASAOTuQo3NN8lGJkaAsolIAWUl/wCVi/l9/wBT&#xA;PpP/AEnW3/NeW/lcv82XyLX48P5w+adWV/Y39ql3Y3EV3ayisdxA6yRsAafC6kqcqlExNEUWyMgR&#xA;YVpI0kRo5FDxuCrowqCDsQQe2RBS+Lvzi8p23lfz/qOnWaenYS8bqzjGwWOYcig9kfko9hnWaLMc&#xA;mIE83n9Tj4JkDk+uPJH/AChegf8AbNtP+TCZzOo/vJf1j97u8P0R9wTrKW1Jm86+TVJVte04MNiD&#xA;dwVB/wCDy78vk/my+Ra/Gh/OHza/xv5L/wCr/pv/AElwf814/l8n82XyKPGh/OHzSHz/AOcPKVx5&#xA;D8yQQa3YSzy6XexxRJdQs7O1u4VVUNUknYAZbgwZBkiTE8x0YZc0DA7jker4sgt5rieOCFDJNKwj&#xA;jQdWZjQAfM50Z2dMH3D+W3kDTPJPlqDS7VFa8dVk1K8A+KaenxGvXitaIOw96k8xqM5ySvp0d5hx&#xA;CEaZUSAKnYDKG1Im8/eRVnNu3mPSxcA0MJvbcOCO3HnXLPBn/NPyYeLHvCdQXEFxCs0EizQuKpJG&#xA;wZWHiCNjkCKZA2kvne78pWvlm9k82GD9BshS5S4HJXr0VF+0X/l4/FXpk8QkZenmxyGNerk8U/5x&#xA;hbRm82+cm0SOaLSGEBsY7khpRF6kvEOV2r/nvmZrL4Y3zcbTVZp9EZr3MdirsVdirwL/AJyx/wB4&#xA;vLX/ABku/wDiMWbrsbnL4fpdZ2l/D8f0PnTN66tnP5I/+TV8vf8AGaT/AJMSZq+1v7of1v1ud2f/&#xA;AHnwfZ+c47l2KuxV2KuxV+ekH9zH/qj9Wdhpf7qP9Ufc87n+uXvLJPy6/wDJg+WP+2tY/wDUSmOq&#xA;/upf1T9y4Prj7w+58496Jhv5xabqGp/ltrdjp9vJd3k0cQht4VLuxE8bHio3OwJzL0MxHNEk0P2O&#xA;Pqok4yA+Uf8AlV/5jf8AUtal/wBI0v8ATOk/N4v50fm6XwMn80/J9E/847eUvM/l3yxfDXIZLMXt&#xA;yJbSylNHRVTizsn7HM7UO/w5o+080JzHDvQdpocUoxN9Xq+axznx7+f+u22r/mZf/VmDxWCR2XqL&#xA;0LxAmT/gZHZfozqezsZjhF9d3RayfFkNPqjyR/yhegf9s20/5MJnOaj+8l/WP3u4w/RH3BOspbXy&#xA;Ldf84+fmpJdTOulxlXdmU/WrfoSSP286cdpYa5/YXRfksvd9yl/0Lx+a3/Vrj/6Srf8A5rw/ylg7&#xA;/sK/ksvd9yUeafyj89eV9KOq61Ypb2QdYjIs8Mh5P9kcUZj2y3DrMeSXDE7teTTzgLkEq8hPBF56&#xA;8uSzkLDHqlk8jN0CrcIST7UyWpjeOX9U/cjDKpj3h915yD0SU+bdAHmHy1qWiG4e0GoQPB9Yj3ZO&#xA;Q602qPEdxtlmKfBIS7mGSHFEh8v61/zjD+ZFk7fUPqeqxblDDMInI7VWcRqD/sj8828dfjPOw66W&#xA;kmOW6U6Lb/nF+V+prqSaZfWtpGwN3CyPLYzL0KytGWi3HRq1HbJTOLKKsfpYx48ZumPfmD+Y/mTz&#xA;xqpvdWm428ZP1OwjJEECn+Ud2P7THc/KgyWLBHGKCJ5TM2WPWF1qFu7fVLmW25U9RonZKgdK8SK5&#xA;dDDxlrlPhTRdc1tQANRuqD/i6T/mrM6OKIFU4pmT1fdPltmfy7pbMSzNZwFmO5JMS7nOQy/WfeXo&#xA;sX0j3JjlbN8Dfp7Xf+rjdf8AI6T/AJqztPDj3B5niKhdahf3YUXVzLcBK8BK7PSvWnInCIgclJtD&#xA;5JDOfyR/8mr5e/4zSf8AJiTNX2t/dD+t+tzuz/7z4Ps/Ocdy7FXYq7FXYq/PSD+5j/1R+rOw0v8A&#xA;dR/qj7nnc/1y95ZJ+XX/AJMHyx/21rH/AKiUx1X91L+qfuXB9cfeH3PnHvROxV2KuxVjH5hWfnq7&#xA;8vzQeT7q2tb+RWV3nDCTiR0gkFVRz0BZfpHXMjTSxiV5ASPxzaM4mY+h8UanYahp+oXFlqMLwX1u&#xA;7JcQyijq4O9f651sZCQscnQSBBovuTyR/wAoXoH/AGzbT/kwmchqP7yX9Y/e9Dh+iPuCdZS2uxV2&#xA;KvK/+clf/JZyf8xlv+ts2XZX998C4Wv/ALv4vkwEggg0I3BGdK6V9Z/lH+dei+ZtOttM1i5Sz8yR&#xA;KsTrMwRLojYPEx2Lt+0nWvTbOa1ugljJlEXD7ndabViQqX1fe9UzWua7FXYq83/Mv8jvKnnCznuL&#xA;a3j0zX6F4b+BQiyP143CLs4b+b7Q8exysGqlA77xcfLpxIbbF8jX2nXWmX1xp13GYbq0leC4iPVZ&#xA;I2KsDTwIzqsdcIMeTopXe/NQybF97eWf+Ub0n/mDt/8Ak0ucZm+s+8vR4vpHuTLK2x+e+du8w7FX&#xA;Yqzn8kf/ACavl7/jNJ/yYkzV9rf3Q/rfrc7s/wDvPg+z85x3LsVdirsVdir89IP7mP8A1R+rOw0v&#xA;91H+qPuedz/XL3lkn5df+TB8sf8AbWsf+olMdV/dS/qn7lwfXH3h9z5x70TDfzi1LUNM/LbW77T7&#xA;iS0vIY4jDcQsUdSZ41PFhuNiRmXoYCWaIIsfscfVSIxkh8pD80fzGBB/xLqO3/LzIf450n5TF/Nj&#xA;8nS+Pk/nH5vbP+cd/wAy/NvmPUtQ0XXJ2v4ra3+swXjqokQiRUMbMoHLlzqK77HNR2npYQAlHbd2&#xA;GhzykTE7vc807snzX/zlVolnba5omsRKFudRhnhuaCnL6qY+DHxPGbj8gM3/AGRkJjKPd+l1PaMA&#xA;JA973ryR/wAoXoH/AGzbT/kwmabUf3kv6x+92OH6I+4J1lLa+DL3XtcF7cAajdU9R/8Ad0n8x987&#xA;MY41yDzRkVH9Pa7/ANXG6/5HSf8ANWHw49wRxFSuNV1O5j9K5vJ5o614SSO61HsScIgByCklC5JD&#xA;0nyP+Q3nPzTYvqDqulWJiZ7SW6BDTvxqgSPZgjGnxnam45ZgajtDHjNcy5WHSTmL5BKLfzx+aHky&#xA;8fShql9p81meDWNwfURKdKRTB0pTpQUOWnT4co4qBvq1jLkxmrIZdpH/ADk95+tOK6hb2WpR/tM0&#xA;bQyH5NGwQf8AAZiz7JxHlYb46/IOdF9A/lz57tPO3lqPWre2ezPqPBPbOwfhIlCeLgLyFGG9Bmk1&#xA;WnOGfCTbtMGYZI2yfMdufHH5928EH5r64sNAGNvI6gEUd7aJm69ak8vpzquziTgj8fvdDrBWUvPs&#xA;zXGfe3ln/lG9J/5g7f8A5NLnGZvrPvL0eL6R7kyytsfnvnbvMOxV2Ks5/JH/AMmr5e/4zSf8mJM1&#xA;fa390P6363O7P/vPg+z85x3LsVdirsVdir89IP7mP/VH6s7DS/3Uf6o+553P9cveWSfl1/5MHyx/&#xA;21rH/qJTHVf3Uv6p+5cH1x94fc+ce9Egdd0LStd0m40nVYPrOn3QCzw8nTkFYOPijKsPiUdDk8eS&#xA;UJcUeYYzgJCjyYX/AMqA/KT/AKsP/T3e/wDVbMv+Us/877B+px/yWLu+0so8r+S/K/la2kttA0+O&#xA;xjmIaYqWd3K9OUkhd2pXapzHzZ55DcjbdjxRh9IpOspbHy7/AM5O+Z7bUvNljo1s4kXRYX9dlNeM&#xA;9yVZ0/2KRpX32zouycJjAyP8TptfkudDo+iPJH/KF6B/2zbT/kwmaPUf3kv6x+92mH6I+4J1lLa8&#xA;/f8AIP8AKaR2d9Cqzksx+t3nU7n/AHdmb/KOf+d9g/U4v5PF3fet/wCVAflJ/wBWH/p7vf8Aqth/&#xA;lLP/ADvsH6l/JYu77S7/AJUB+Un/AFYf+nu9/wCq2P8AKWf+d9g/Uv5LF3faXmv5aaT+Vth+amva&#xA;LqNmq6ja380Xl9bpzJahI3IEaiStZhT4S5Ne1G67DVzzHDGQO1erv/scPTxxjKQe/Z9GZoXbJR5g&#xA;8oeWPMUQj1vTLe/CjijyoDIg60SQUdfoOW4s84fSaa54oz+oWxIf84/flQLj1v0MxHUQm5ueFf8A&#xA;kZX8cyf5Sz1z+wNH5LF3M60rSdN0mwi0/TLaOzsoBSK3hUKi1NTsO5O5PfMOczI2TZcmMREUOSnr&#xA;etabomk3Wq6lMILK0QyTSHwHQAd2Y7Adzhx4zOQiOZWcxEWeT4c83eYZ/MfmbUtcmUo1/O8qxk1K&#xA;ITSNK9+CALnX4cYhAR7nnck+KRPelGWsH3t5Z/5RvSf+YO3/AOTS5xmb6z7y9Hi+ke5MsrbH5752&#xA;7zDsVdirOfyR/wDJq+Xv+M0n/JiTNX2t/dD+t+tzuz/7z4Ps/Ocdy7FXYq7FXYq/PSD+5j/1R+rO&#xA;w0v91H+qPuedz/XL3lN/K+qw6P5m0jVpkaSHTr23u5Y0pyZYJVkYLWgqQu2TzQ4oGPeCGOOXDIHu&#xA;L6I/6Gq8o/8AVo1D/kj/AM15o/5Hn3h2f8ox7i7/AKGq8o/9WjUP+SP/ADXj/I8+8L/KMe4u/wCh&#xA;qvKP/Vo1D/kj/wA14/yPPvC/yjHuKnN/zlX5YCj0dFvXau4d4kFPmC+Edjz/AJwU9ox7mKeav+co&#xA;fMN/ayWugadHpPqLxN5I/wBYnFe6DiiKfmGzIw9kwibkeJoydoSIqIp4tPPNcTyTzyNLPMxkllcl&#xA;mZ2NWZidySepzbAVsHAJfRHl/wD5yZ8q6ZoOm6bLpV88tlawW8jr6PFmijVCRV60JXNHl7KnKRNj&#xA;cu0x6+MYgUdgmH/Q1XlH/q0ah/yR/wCa8h/I8+8Mv5Rj3F3/AENV5R/6tGof8kf+a8f5Hn3hf5Rj&#xA;3F3/AENV5R/6tGof8kf+a8f5Hn3hf5Rj3F3/AENV5R/6tGof8kf+a8f5Hn3hf5Rj3F89+btbh1rz&#xA;Vqus2yPDFf3ctzEj05qJHLAHiSKivbN3hx8EBE9A6zJLikT3ln/kr/nIvzloEMdnqaLrljGKL67F&#xA;LlVHQCcBuX+zVj75hZ+zMc9x6T9jk4tbOOx3D0/Tf+cofIdxGPrtnf2U1PiHpxypX2ZXDH/gRmvl&#xA;2TkHIguZHtCHUFNH/wCcjfytWPmL24ZqV9MW0vL5bgL+OVfyXm7h82f57GkGuf8AOU/leCNl0bS7&#xA;u+n3CtcFLeL2NQZXPy4jL8fZEz9RAap9ox6B4j57/M/zZ51uFbVrgJZxHlBp8AKQIfHiSSzf5TEn&#xA;wzb6fSQxD08+91+bPLId2JZktLsVfSOkf85PeVLLSrKzk0m/Z7aCKF2X0aExoFJFX9s0M+yZmRNj&#xA;d2kNfEACii/+hqvKP/Vo1D/kj/zXkf5Hn3hl/KMe4vmPOgdS7FXYqzn8kf8Ayavl7/jNJ/yYkzV9&#xA;rf3Q/rfrc7s/+8+D7PznHcuxV2KuxV2Kvz0g/uY/9UfqzsNL/dR/qj7nnc/1y95TfyvpUOseZtI0&#xA;mZ2jh1G9t7SWRKclWeVY2K1qKgNtk80+GBl3AljjjxSA7yjvzB8t2vlnzjqehWsrz29jIqRyy05s&#xA;GjV9+IA/ayGmynJjEj1TmhwSMe5mer/lHo1l5t8naLHe3LQeZII5rqVuHOMydRHRaffmLDWSMJyr&#xA;6G+WnAlEX9SQfmv+W1z5F8wrZq73Gl3Serp924ALAUEiNQBeaN1p2IPfLtHqhmjfUc2vUYDjlXRm&#xA;15+QuiJ+Z1v5Qg1O5W1m0k6k1y6xtIHE7xcAAEXjRa5iR7Rl4JyEC+KnIOjHicF9LSjy7+WX5ceb&#xA;Z303y35suE1ooz21rf2nprLwXkQGVvvpU034mmW5dVlxC5w9PkWvHghPaMt/MIPyV+Ven6lY+abr&#xA;zJez6YfKzBLyOCNZWqvqepsSK0MW1OuSz6sxMBAXxscWnBEjI1wpbqGk/lGlhcvYa9qc18sTtawy&#xA;WaIjyhSUVmDnipagJyyM89i4xr3sTHHWxPyZHr35Yflv5bh0n9PeYb+3m1W1ju0EVqsqKrgVqQa7&#xA;E+GUY9XlyXwxHpNc2yeCEa4idx3Jb5p/JfUtP8xaDpmhXqaxa+ZozLpV5x9IFVVXdnAL/Ckbq/Id&#xA;u2Tw64SjIyHCYc0ZNKRIAb8XJHXH5Zfllp2sr5c1Tzq0euchFPJFaFrSGY0HpvIW7E0JqAP2uORG&#xA;qzSjxxh6ffuk4MYPCZb+7ZTg/I3ULb8y7PydrF3wtr+GW4tdSt1qJI4o2bZW6MGSjKenyocT2gDh&#xA;OSI5dF/KEZBA9UTpX5XflprXmGfyzp3mm8h1uN5YYkubMCN5IOXNVKuK/YJ6jIz1eWEeMwHD70x0&#xA;+OUuES39zHPJn5aXOtfmQ/k6+kaEWktwmo3EFGKLbcgWXkKUZwqgnxzIz6oQxeIOtV8WrFgMsnAV&#xA;D80/I1t5O8xxWVjcteaXeWsV5YXb8SXjkBB3QBT8SmlO1MOk1BywsiiDRXUYuCVDkyG4/LbyBpHl&#xA;ny5rHmLXb60fzDbmeKOC2WZUKBC9TyrQeqO2UDVZJTlGMQeHzbDghGMTIn1eSX+ePyrg0LTNJ8wa&#xA;Nqy615Z1eUQxXqx+k6OSaKykt14N4UIIIHezT6szkYyHDOLDNp+ECQNxKC/NvyLp/krzWujWNxLc&#xA;wG2juPUn48+TswI+EKKfDktHqDlhxHvRqcIxyoNebPI9hovkjyr5gguJZLnXkme4ifjwQxFQOFAD&#xA;vy7nDhzmeScT/CjJiEYRl/OZRZ/khbz/AJVnzS15MmvPZy6lBp3wem1tC4JalOZrCQ2x6kZjS15G&#xA;bgr03V+bcNL+74r350wTyrZeSLlLk+ZdSvLB1KfVRaQLOHBrz5cmWlNqZmZZZBXAAfe48BE/UaZp&#xA;5+/Lb8uvJ13Npl5r2oPqwtvrFtEtqhiYsGEas4barLvmLptVlyixEcN97fmwQxmiTfuXa1+WX5ee&#xA;XtI0O917Xr+GbW7NLuOO3tUlVeSIzCvIdDJtghqss5SEYj0muaywQiAZE7juYP5qs/JVt9V/wzqN&#xA;3qHP1Prf1uBYOFOPp8OLNyrVq/LMzDLIb4wB7miYiPpNpBlzWzn8kf8Ayavl7/jNJ/yYkzV9rf3Q&#xA;/rfrc7s/+8+D7PznHcuxV2KuxV2Kvz0g/uY/9UfqzsNL/dR/qj7nnc/1y95ZJ+XX/kwfLH/bWsf+&#xA;olMdV/dS/qn7lwfXH3hOvzxR0/NXzArihMsTAHwa3jYH6Qcq7PP7mP46s9X/AHheqeaNvzP/ACsU&#xA;7MLO3qvcZrsX9zl95cvJ/eY/cETrlzafmHf+bfy81J0TW9LuZbvyzdPsSF3MRPgK0P8AkmtPgyOM&#xA;HAIZR9JFS/H4+1lI+KZYzzB2ZAfX/wChgNM9f+//AMLD1en2/rUnLpt18Mo2/Kmv5/6G3/Li/wCa&#xA;+dvyiS7f8y/LgtQxkF7GzcevprvL9Hp8q5vNZXgyvudXp78SNd726wfQ2u/ziN/6/wCifUjF79V4&#xA;GfiIZRN6XOqcuVacs1MuKsNfV/Y58eG8l8v7Xi2u/wDKm/0TcfoH/EX6WoPqv176j9WryHL1PS+P&#xA;7NaU75tcfj8Xq4OHyu3Bn4Venivzp6/5+8l+VvNN75LsNU8x/ofUZ9NhhsrL6q8xn5KDtMGWNDXY&#xA;BuuazT554xMiPEOLvc3LijPhBlRodE40zV9Kt/zh0DyXBbyQw+V9JntbOa4485pJYoW5Jx2I9CGv&#xA;LbfltlU4SOCWQn65fr/S2RkBljD+aHgFla+V7fzPq9t58XVfWjmkTjpfoeqbkSkP6n1ioofbN1Iz&#xA;MAcXD8b5fB1kRESPHfwe3aZ5IsfLX5xeUbiC91K9m1SzvZJ21aVJp09O3oiVVUpxDUIqc1M9QcmC&#xA;YIAojl73YRxCGWNXvfP3IXyb5B8kp501zzjZ69LrtzoNzdXdzpFvaNBJHMTIwQeq370qQwXjQMw6&#xA;4c+pyeHHGY8PEALtGLDDjMweLh6UgvyvTUNT078xPzAtLKV9Q1T6zb6TbQgvJzlBlKADdqM8W48D&#xA;k9WRE48ROwq/x82OnBInMDc8ku/NLy5q11+THlLWdRs5bTVNDUafewzIY5FgJ9GNnB36wx0/1ss0&#xA;mWI1E4g2JbsdRAnFEkbjZJ/ze/8AJb/lj/2z7j/iFrlmi/vcvvH6WGp/u4e4/oRumK0f/OOSm7Bp&#xA;NrqHTyx2oHQNx9vgkyMv8b2/m7/j5KP8X3/nIP8A5ybBH5kRkildPgI9/jkGS7K/uviuv/vPgjPO&#xA;OjXerfl7+VWkQKRc35lgiBFP754grb9qNWvhkcExHLlkelLliTDGO+3qrWmsW35uaXpttpdwfKVv&#xA;obaU05jZrZaj1aF6cekMafhmu4onASSOPivzc2iMoAHp4afLfm/QZPL/AJo1TRZAf9BuZIoy3Vow&#xA;1Y2/2SENnQ4cnHAS7w6jJDhkR3PQv+cm/wDyZCf9s+D/AInJmD2V/dfFytf/AHnwZV+Zv/Kuv8M+&#xA;Rv8AF36Y9X9Ex/VP0T9V48fSh5+p9Y3rWlKZj6XxePJwcP1db8+5tz+Hww4r+no8W81f4L+uxf4T&#xA;/SX1L0/3/wClfQ9X1eR+x9X+Hjxp13rm1w+JXrq/L9rg5OC/TdeaSZc1s5/JH/yavl7/AIzSf8mJ&#xA;M1fa390P6363O7P/ALz4Ps/Ocdy7FXYq7FXYq/PSD+5j/wBUfqzsNL/dR/qj7nnc/wBcveUVY3t1&#xA;Y3tvfWkhiurWRJreVeqSRsGRh8mFctlEEUeRawSDYelz/nrJf3cWo6x5T0XUtWhQIl9LC3I8RQF1&#xA;LMGp1Hh2pmAOz+EVGchHuco6uzZjElJb382fMGpefdP846pFFPcaayfV7KKsUKxoWYICebdXJJNT&#xA;l0dHGOI449WuWokZiZ6JXqHnnU5/PcvnGyUWOoPdfXIo1bmqN/KSQOSkbHbcZZHTgY/DO4qmBynj&#xA;4hztmN1+fmqS+fYfOEekwJcQ6d+jPqrSOyFTK0vqcgFNfipTMUdnRGPw7625B1h4+OulIbTvzqTR&#xA;BJL5c8p6RpN/IpQXypJLKoYUPEu1R8q09slPQ8f1zkQxjquH6YgFLPJ35qX3l61122utPg1mPzCw&#xA;bUfrbOOZ+PlXgRXn6hrlmfSCZiQeHh5UwxZzEEVfE3c/mF5Wlt5Yk8jaXC8iMqzK8/JCwoGFW6jr&#xA;gGmmD9cvsU5Y/wA0fahPPH5i3nmmXRZhaiwl0W1S2hkjkLMxjIKyVovE1GS0+mGPi3viNoy5jOvI&#xA;I7zf+beq+YtR0TWo7VdN8w6NGE/SkEhLTUoQWQrQDlyNNx8RHTI4NHGAlG7jLoyy6gyIPKQ6ppL+&#xA;ek1zexatfeVNFu9fhA4anJC/IsoAV3UN8TCmxrt2plY7PocInIR7mZ1ZJsxjavefn/qd55q0HzHc&#xA;aTEbrRYJ4GiWVlWZrmMIz/ZPCnWm+Rj2dEQlAHaSTrCZCVcmM+U/zN1Xy152u/M9nCri+kna7sGc&#xA;hHSdy/AsB+w1CDTtmRm0scmMQPTq1Y85hPiCZ63+cV3c+Vl8vaDp/wDh+3+uyXzzWtw/qEyu7mMF&#xA;VjogMgp7KBlePRAT45Hi2rcMpakmPCBw72hNL/NjV4PJuteV9VjfWLfVhWO4up5GkgcAcWXkH5AO&#xA;itSo6e+Sno4nJGcfTwojqDwGJ3tGx/nBbS6Fo2kat5X0/Vo9DhEFnLctKSBRQxKghfi9Na5H8kRK&#xA;UoyI4k/mfSAYg0lPnn8z9a822llp0lra6Zo+nGtpptihjiVqEBjUncAkClB7ZZp9JHGSbJkepY5c&#xA;5mAOQHcnkn543eox2Z8y+W9J167sVCQ3t1C3rMBv8dCVavUjjSvbKRoBG+CUogszqia4gDSx/wA8&#xA;dauvN2ka/qOnWstvocciaZpMHKC3iMienz39Q1ApTtsKUw/kIiBiCfVzK/mpGQkQNuiRXn5oecLj&#xA;zPJry6lcxFrv64lks8voIBJzWIJWhQD4aU6ZdHSYxDhocqaznkZcVqH5iecx5y8yya6bBdPmmijj&#xA;niSQyhmjHEPUqtPgCinth02DwocN2jNl45cVUqfmR58m87+YhrU1mti4gS39FHMgpGWPLkQvXlg0&#xA;unGKHDdpz5vElbIbv85bXUdM0ux1jypp+pjSbZLW1lnebkERFUn4WH2uAJykaIxJMZkcRtmdTYAM&#xA;QaYv5p8z6PrMEEdh5ds9EeJizyWjSMZARQK3qFthmRixSjzkZe9qnMS5ABjmXtbOfyR/8mr5e/4z&#xA;Sf8AJiTNX2t/dD+t+tzuz/7z4Ps/Ocdy7FXYq7FXYq/PSD+5j/1R+rOw0v8AdR/qj7nnc/1y95T7&#xA;yRZWt9500Cyu4xNa3WpWkNxC3R45J0V1NOxU0w6iRGORHMA/cjEAZgHvD6n8w/l/+Snl3TjqWtaP&#xA;aWdkHWMzMszDk/2RRCx3+Wc7i1OoyGokku3yYMMBch96E8teUPyD81x3H6B0+yvhb0W4VBNG6cwe&#xA;Jo5Rt6GhGSy59TjriJHyRjxYJ/SPveFfnd5A03yZ5tS00ov+jb23W6t4pCWaIl2Ro+R3YArUE77/&#xA;AE5uNBqTlhcuYddqsIxzocmBWltNdXUNrAvKad1iiXxZyFUfeczSaFuMBb6q038lvyq8m+XzqHmW&#xA;OO9a3VGvdRvWf0gzELRIlPEKXNFFC3uc5yWvzZZVDbyDuRpMWONyWQeTf+ce/ONndHS1s0MCGSaa&#xA;0le1lhQdZDGxUBR4shXCc+qxEcV/egYsGQbPD/Lf5a23mr8wbny95c1A3WiWzNJJq7xlaWykAsE/&#xA;abk3FenLrsM2+XVHHi4pipd3m6/Hg458MTt3vdrz8v8A8iPI1jAuuQWytNVEm1B3nnlI2LCMV6V3&#xA;KIAM00dTqcx9N/B2MsODGPUgfMn5Dflz5l0H9KeVJE06WSIy2l3BK0lpJT/fisW4rtQlCOPcGlMn&#xA;i7Ry45cM9/vYz0eOcbht9yv+T35b+Tb38u9Mn1fRbG91Hndx3Fy6RzF2ivJox+8FQwAQAEHpg1uq&#xA;yDKRGRA2+4MtLggcYJAv9r501CztU8/3NkkSraLqrwrAB8AjFyVCU8OO2b2Mj4YPXh/Q6mQ9deb6&#xA;H/Or8v8AyTpP5ZazqGmaJZ2d7D9W9K4hiVXXndxI1CPFWIzRaDU5JZogyJG/3O11WCEcZIG/7WE/&#xA;kv8AkTY+YNMi8yeZ+Z06Yn6jpyMYzKqniZJXWjBCQQAtCetadczXdoGB4Ic+pcfS6MTHFLk9W/wB&#xA;+SP1r9BfUNJ/SA2+peqn1v7ufrZrfzOoriuVfZ+pzPAw3w7W8m/On8i7Ly5pr+Y/LXP9GRMBf2Ej&#xA;GQwhyFWSN2qzJyIDBiSOtaVpstB2gch4J8+hcLVaQQHFHkpfkr+Rtr5nsV8xeYy40h2K2VlGxRrj&#xA;g3F3dx8Sx8gVHE1J7gdTr+0DjPBD6vuXS6TjHFLk9dP5f/kjFdjQmsNJXUGoBZNKn1s1ApQF/WzW&#xA;fmdRXFcq+z9Tm+Bhvh2t5d+dH5EafoWly+ZPK4dLG3ob/TnYyemjED1Imar8QT8QYnxrTNjoe0DM&#xA;8E+fQuHqtGIjijyei+Vvy38hXH5c6RfT6DZSXk2j288tw0Kl2la1VmcmnUsa5gZdVlGUgSNcR+9y&#xA;4YIHGDW/D+h8i507pHv/AOSP5IeXNa8uw+ZvMiNeLeM/1KwDNHGqRuYy8hQq7FmU0FaU8a7aXX6+&#xA;cJcENq6uy0mkjKPFJlsOn/8AONuo336Eij0s3YcwKimSEtITTiswKByTsKOfbMYy1cRxeqm4R05N&#xA;bPGvzr8m+SfK3mCOz8t37SysGN7pjH1Ran9ketX9r+RqsOpO4za6DPkyRuY+Pe4OqxQhKol5xmc4&#xA;rOfyR/8AJq+Xv+M0n/JiTNX2t/dD+t+tzuz/AO8+D7PznHcuxV2KuxV2Kvz0g/uY/wDVH6s7DS/3&#xA;Uf6o+553P9cveWSfl1/5MHyx/wBtax/6iUx1X91L+qfuXB9cfeH2R540zybqOhNbeb3gTRzKjM1z&#xA;cG1j9QV4fvA8W/tyzltPPJGV4/q91u9zRgR6+SWfl7of5XaU16PJEllI8wT66bS8N41Frw5FpZio&#xA;3PhXLNTkzSrxL+IphghjjfBXzthWv/lhdefPzH1T/GLTWdnZWkH6DbTZU4vAZZOXqNLE1X5bsKCl&#xA;e4pmXj1Yw4h4e5J3v+1x56c5Mh4+7annP5wflzov5aX/AJcvtAuLqeeeWadvrrRSBXtGhaPiI44u&#xA;8hrWuZ2i1Us4kJAfDztxdVgGIgxe1+Xvzf8Ay1826SkN/eWtrLcIBdaXqfBF5V3UGUCKUchtT7gd&#xA;s1OXRZsUrAJ8w58NVjmN/kV2q/kt+VuvWzy2+nRWhnU8LzTH9EAH+VUJhI+aEYw1+aB3N+/8WmWk&#xA;xSGw+THfyJ8nnyn5m87aJM6zz2ctksdwBQvBIkskTU348lbcePyy/tHN4kIS77/Q06PHwSkO6nl/&#xA;/OSv1/8A5WW/1mvofU7f6jWtPS+LlSv/ABbz6ZsOy68HbvNuJrr8TdhAn87L5QCI18vlRp3BCeoL&#xA;QzkLyDkfCT0oG+jvmZWPj6cf2uNcuHrw/Y+p/wAgP/JSaD/0d/8AUbNnOdpf38vh9wd1ov7ofH71&#xA;Gb/lQn6Yf1f0J+lvrB9Tl6Xq/WOe9e/Ln+OEfmeH+KqYnwL6Wrfn/wD+Sk17/o0/6jYcHZv9/H4/&#xA;cWWt/uj8PvTeGWXSvyrWbS1AmsdD9SyC0+3Faco/bqBlRHFno9ZfpZA1i2/m/ofE/wBaufrX1v1n&#xA;+tc/V9fkfU9SvLny68q71zraFU6C32trzy3/AOVF/LqaAz3GhyS3aMBQSNaFm6dKNnJ4xw5xX879&#xA;Lv5m8Rv+b+hvywW0/wDKzTH05R6kGixS24A5VkFqHBp35Nvjl9Wc3/O/SuPbEK/m/ofFMt3dTXT3&#xA;csrvdSOZXnZiXMhPIuW61rvXOsAAFOgt9sW0kuo/lbFJq5JlvNDVtQZhU8pbSspI+ZOckRw5vT0l&#xA;t83oLvFv/N/Q7yd/5KzQ/wDth2v/AFCLjn/vpf1j964/7of1f0PiHOueffRn5F/nL5XsPLFv5Z1+&#xA;4XTp7AuLW6kB9GWOR2kozioRlLEfFQUpvXNF2hoZynxx3t2mk1URHhls9HuPJP5S+bfUuFsNM1Fp&#xA;fjlubJkDsT+00tsysT71zAGoz4trkPf+1yjhxT6A+79jwH88/wAp7byZdWup6ZPLNpepO6Mk7c5I&#xA;pwOVC/7YcVIrvsa5uuz9YcoIPMOt1em8M2OReVZsnDZz+SP/AJNXy9/xmk/5MSZq+1v7of1v1ud2&#xA;f/efB9n5zjuXYq7FXYq7FX56Qf3Mf+qP1Z2Gl/uo/wBUfc87n+uXvLIvy/lii8+eW5ZXWOKPVLJp&#xA;JGIVVVbhCSSdgAMdSLxy/qn7kYT64+8PrnzpZ+RPN+iNo+q6xAto0iSkwXUKPyjrTduYpv4ZzOA5&#xA;cUuKMd/cXd5hjyCiftSvyL5O/K3yTcXF1o+pwtdXKelLcXN5E7enUNxAUooFQD0y3UZ82YVIbe5r&#xA;w48WM2D9rxv/AJyP88aL5j17TbDSLhLy30mOX1buIho2lnZeSo42YKsS7jbfNp2Xp5Y4ky24nC12&#xA;YTkAOjzjyjc+WrbzDZzeZbWW90ZH/wBKggbg5HY9iwB6qCK+OZ+YTMTwGpOJjMRIcXJ9Palo/wCR&#xA;fnzS7MC7sFjs4vTs2tp0s54Yq19MxHgQtTXi6bVNOuc9CepwyOx3+Lt5RwZANx9yM8vN+U/5Z6Lc&#xA;x2mtQR28z+tMZbpbiaRlXiOEce52H7CZHKM+okLj9jLGcWEbF41pX55Lafm5qPmpoH/QeqcbW4th&#xA;T1BbxKqRS0qR6i8ORFe5Fe+bWfZ94BD+Ife4EdXWUz6F7lff8qk/MGztri8m0/VkiBeFmmEc8YP2&#xA;gwDRyp7q2aePj4CQLDsZeFlG9FLfM/5o/lp5G8unTdNe0u3iiaO00WxZJEJau0pTkqKSaty3Pgcs&#xA;xaTNmncrHmWGTUY8caFHyb/JbzNox/LbSnvL2ytLmWS9lltg8UCoZL2d+KxVHBfi+EU6Y6/DLxTQ&#xA;JG33BdLkj4Ysjr975k1GWJvzGupg6mI6xI4kBHHj9aJ5V6UpnQQH7of1f0OokfWfe+lfz213RLr8&#xA;qtcgttQtp53+q8Io5o3c0vISaKpJ6DNB2fjkM0SQev3F2+ryROM0R+Clv5E/mtoureXLPyzqtylt&#xA;rOnxrbQLMwVbmBPhj9MnYuq0Vl6mlfGlnaGjlGZnEek/Yw0epBjwnmE6i/5x+/LOPXBqy2MhAf1V&#xA;08yk2oetfsU5Ur+zy49qUyk9pZuHhv49Wz8lj4rY1+fn5s6NbeXrryvo13Hd6nqA9G9eBg6QQV/e&#xA;KzLVeb/Y49hWtNq5HZ2jkZCchQDTrNSOHhidyu/IH81tHvPL1r5W1e6S11bTx6Nk0zBVuIK/u1Rj&#xA;Qc0HwcfAAiu9B2jo5CRnEWD9idFqQY8J5hkcn/OP35Zya5+ljYyisnqtYCUi1Lk1+xTlSv7Ibj2p&#xA;TbKB2lm4eG/j1bfyWO7SP89fzY0bSvLt55Z0i5S51m/Rra4WEhltoGHGTmRsHZaqF6jrttW7s/Ry&#xA;lMTkPSPta9ZqQI8I5lnHkK90xvy88uQTXMVG0iySRDIoO9sgIO9RmHqIy8WRA/iP3uRhkPDAvoGP&#xA;/wDKlPyR/wCrZD/0n3X/AFXy/wDP6jv+wfqavyuHu+39qQfl5qn5Ea15NHl5YbWw+sqn6QsNQkEd&#xA;xJMnRxcEp6hrUqUYUH7K9Mu1MNTDJx7nur9TVglglDh5e/8AWnHlj8v/AMnfKGsjzBY6tFHcW6uI&#xA;3uL+IxRB1KN3WtVY/bJyvLqc+WPCR9jPHhwwlxA/a8u/5yE/NDQ/NMljouhS/WrKwkea5vACEklK&#xA;8FWPkASEHKrdDXbpmw7N0ksdylzLia3UCdCPIPGs2rgs5/JH/wAmr5e/4zSf8mJM1fa390P6363O&#xA;7P8A7z4Ps/Ocdy7FXYq7FXYq/PSD+5j/ANUfqzsNL/dR/qj7nnc/1y95X5e1OxV2KuxV2KuxV2Ku&#xA;xV2KuxV2KuxV2KuxVFHVNTMH1c3cxt6U9EyPwp4ca0yPCOdJsoXJIdiqKGp6kIPq4u5hb0p6PqPw&#xA;p/q1pkeEXdJtC5JDsVdirsVdirsVdirOfyR/8mr5e/4zSf8AJiTNX2t/dD+t+tzuz/7z4Ps/Ocdy&#xA;7FXYq7FXYq/PSD+5j/1R+rOw0v8AdR/qj7nnc/1y95X5e1OxV2KuxV2KuxV2KuxV2KuxV2KuxV2K&#xA;uxV2KuxV2KuxV2KuxV2KuxV2KuxV2Ks5/JH/AMmr5e/4zSf8mJM1fa390P6363O7P/vPg+z85x3L&#xA;sVdirsVdir5jX/oVHiOP1/jTan6R6Znw/M0K46+LiS8CzfDbf/WKf/L/AP8AcxyX+Ff0/tR/g/8A&#xA;Rd/1in/y/wD/AHMcf8K/p/av+D/0Xf8AWKf/AC//APcxx/wr+n9q/wCD/wBF3/WKf/L/AP8Acxx/&#xA;wr+n9q/4P/Rd/wBYp/8AL/8A9zHH/Cv6f2r/AIP/AEXf9Yp/8v8A/wBzHH/Cv6f2r/g/9F3/AFin&#xA;/wAv/wD3Mcf8K/p/av8Ag/8ARd/1in/y/wD/AHMcf8K/p/av+D/0Xf8AWKf/AC//APcxx/wr+n9q&#xA;/wCD/wBF3/WKf/L/AP8Acxx/wr+n9q/4P/Rd/wBYp/8AL/8A9zHH/Cv6f2r/AIP/AEXf9Yp/8v8A&#xA;/wBzHH/Cv6f2r/g/9F3/AFin/wAv/wD3Mcf8K/p/av8Ag/8ARd/1in/y/wD/AHMcf8K/p/av+D/0&#xA;Xf8AWKf/AC//APcxx/wr+n9q/wCD/wBF3/WKf/L/AP8Acxx/wr+n9q/4P/Rd/wBYp/8AL/8A9zHH&#xA;/Cv6f2r/AIP/AEXf9Yp/8v8A/wBzHH/Cv6f2r/g/9F3/AFin/wAv/wD3Mcf8K/p/av8Ag/8ARd/1&#xA;in/y/wD/AHMcf8K/p/av+D/0Xf8AWKf/AC//APcxx/wr+n9q/wCD/wBF3/WKf/L/AP8Acxx/wr+n&#xA;9q/4P/Rd/wBYp/8AL/8A9zHH/Cv6f2r/AIP/AEXf9Yp/8v8A/wBzHH/Cv6f2r/g/9F3/AFin/wAv&#xA;/wD3Mcf8K/p/av8Ag/8ARZF+X3/QvH+MtM/wx9c/TvN/qPq/XeHL025V9X4PsV65Tn8fh9fFXm2Y&#xA;vCv01b3nMRyHYq7FXYq7FX//2Q==</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>612.000000</stDim:w>
            <stDim:h>792.000000</stDim:h>
            <stDim:unit>Points</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>True</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=0 G=83 B=161 1</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>0</xmpG:red>
                           <xmpG:green>83</xmpG:green>
                           <xmpG:blue>161</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=255 G=255 B=255 1</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -260.523 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 260.523 li
266.5 260.523 li
266.5 0 li
cp
clp
[1 0 0 1 0 0 ]ct
.500033 36.023 mo
222.5 36.023 li
222.5 260.023 li
.500033 260.023 li
.500033 36.023 li
false sop
/0 
[/DeviceCMYK] /CSA add_res
.982574 .751858 .0358282 .00030518 cmyk
ef
.500033 36.023 mo
.500033 36.5229 li
222 36.5229 li
222 259.523 li
.999998 259.523 li
.999998 36.023 li
.500033 36.023 li
.500033 36.5229 li
.500033 36.023 li
0 36.023 li
0 260.023 li
0 260.155 .0533724 260.283 .14644 260.376 cv
.239575 260.47 .368336 260.523 .500033 260.523 cv
222.5 260.523 li
222.632 260.523 222.76 260.47 222.854 260.376 cv
222.947 260.283 223 260.155 223 260.023 cv
223 36.023 li
223 35.8913 222.947 35.7625 222.854 35.6694 cv
222.76 35.5763 222.632 35.5229 222.5 35.5229 cv
.500033 35.5229 li
.368336 35.5229 .239575 35.5763 .14644 35.6694 cv
.0533724 35.7625 0 35.8913 0 36.023 cv
.500033 36.023 li
.69482 .6318 .621515 .583612 cmyk
f
25.6631 195.083 mo
25.6631 205.663 li
25.6631 207.123 25.6631 208.113 24.7305 208.973 cv
23.7969 209.823 22.5229 209.843 22.021 209.843 cv
21.0181 209.843 19.2417 209.643 18.5898 207.963 cv
18.3594 207.293 18.3794 206.573 18.3794 205.833 cv
18.3794 195.083 li
15.6299 195.083 li
15.6299 205.513 li
15.6499 207.693 15.6499 208.233 15.8403 209.003 cv
16.1719 210.123 17.105 211.013 18.9307 211.443 cv
19.8843 211.643 20.8975 211.723 21.9209 211.723 cv
23.0742 211.723 25.3022 211.633 26.8369 210.713 cv
28.3926 209.723 28.3926 208.083 28.4126 206.103 cv
28.4126 195.083 li
25.6631 195.083 li
cp
3.0518e-05 3.0518e-05 3.0518e-05 3.0518e-05 cmyk
ef
42.0674 207.013 mo
34.5527 195.083 li
31.8135 195.083 li
31.8135 211.963 li
34.7935 211.963 li
34.603 200.133 li
42.0376 211.963 li
44.6963 211.963 li
44.6963 195.083 li
41.6865 195.083 li
42.0674 207.013 li
cp
ef
47.124 211.723 mo
51.9702 211.723 li
53.8267 211.703 55.4819 211.683 57.0474 211.043 cv
59.104 210.093 59.9063 206.943 59.9063 203.673 cv
59.9063 201.533 59.5557 197.693 57.2378 196.183 cv
55.5923 195.363 53.937 195.343 52.5723 195.323 cv
47.124 195.323 li
47.124 211.723 li
cp
51.4385 197.203 mo
53.4248 197.233 53.8965 197.253 54.7393 197.713 cv
56.9365 198.993 57.1572 201.913 57.1572 203.703 cv
57.1572 207.683 55.9531 208.873 54.8101 209.413 cv
54.1372 209.713 53.355 209.843 51.1274 209.843 cv
49.873 209.843 li
49.873 197.203 li
51.4385 197.203 li
cp
ef
73.7021 197.203 mo
73.7021 195.323 li
62.375 195.323 li
62.375 211.723 li
74.2744 211.723 li
74.2744 209.843 li
65.1138 209.843 li
65.1138 204.963 li
72.96 204.963 li
72.96 203.083 li
65.1138 203.083 li
65.1138 197.203 li
73.7021 197.203 li
cp
ef
75.6089 211.963 mo
78.3574 211.963 li
78.3574 205.963 li
81.2373 205.963 li
84.6587 211.963 li
87.7988 211.963 li
84.5181 205.533 li
85.3608 205.323 87.3872 204.513 87.3872 200.663 cv
87.3872 198.103 86.6855 196.763 85.7925 196.163 cv
84.4878 195.343 82.9526 195.343 80.6553 195.323 cv
75.6089 195.323 li
75.6089 211.963 li
cp
79.8423 197.203 mo
81.7588 197.203 82.5815 197.233 83.2739 197.673 cv
84.6187 198.543 84.6387 200.163 84.6387 200.633 cv
84.6387 203.833 82.3208 203.993 81.6084 204.023 cv
80.9961 204.053 80.585 204.083 79.4814 204.083 cv
78.3574 204.083 li
78.3574 197.203 li
79.8423 197.203 li
cp
ef
96.4077 203.083 mo
96.4077 204.963 li
100.692 204.963 li
100.401 208.683 98.2637 209.843 96.4575 209.843 cv
93.6582 209.843 91.5913 207.193 91.5913 203.663 cv
91.5913 200.313 93.1768 197.203 96.4077 197.203 cv
99.3267 197.203 100.25 199.913 100.571 200.963 cv
103.631 199.593 li
102.587 196.743 99.9595 195.323 96.3872 195.323 cv
91.6714 195.323 88.8521 198.193 88.8521 203.733 cv
88.8521 208.353 91.0396 211.723 96.1968 211.723 cv
97.6313 211.723 99.3574 211.473 100.892 210.543 cv
100.892 211.963 li
103.631 211.963 li
103.631 203.083 li
96.4077 203.083 li
cp
ef
106.099 211.963 mo
108.849 211.963 li
108.849 205.963 li
111.728 205.963 li
115.149 211.963 li
118.29 211.963 li
115.009 205.533 li
115.852 205.323 117.878 204.513 117.878 200.663 cv
117.878 198.103 117.176 196.763 116.283 196.163 cv
114.979 195.343 113.444 195.343 111.146 195.323 cv
106.099 195.323 li
106.099 211.963 li
cp
110.333 197.203 mo
112.25 197.203 113.072 197.233 113.765 197.673 cv
115.109 198.543 115.129 200.163 115.129 200.633 cv
115.129 203.833 112.812 203.993 112.099 204.023 cv
111.487 204.053 111.076 204.083 109.973 204.083 cv
108.849 204.083 li
108.849 197.203 li
110.333 197.203 li
cp
ef
129.065 211.963 mo
132.186 211.963 li
126.858 195.083 li
123.537 195.083 li
118.27 211.963 li
121.39 211.963 li
122.293 208.963 li
128.163 208.963 li
129.065 211.963 li
cp
123.076 207.083 mo
125.243 197.203 li
127.39 207.083 li
123.076 207.083 li
cp
ef
134.583 211.723 mo
139.43 211.723 li
141.286 211.703 142.941 211.683 144.507 211.043 cv
146.563 210.093 147.366 206.943 147.366 203.673 cv
147.366 201.533 147.015 197.693 144.697 196.183 cv
143.052 195.363 141.396 195.343 140.032 195.323 cv
134.583 195.323 li
134.583 211.723 li
cp
138.898 197.203 mo
140.885 197.233 141.356 197.253 142.199 197.713 cv
144.396 198.993 144.617 201.913 144.617 203.703 cv
144.617 207.683 143.413 208.873 142.269 209.413 cv
141.597 209.713 140.814 209.843 138.587 209.843 cv
137.333 209.843 li
137.333 197.203 li
138.898 197.203 li
cp
ef
159.868 195.083 mo
159.868 205.663 li
159.868 207.123 159.868 208.113 158.934 208.973 cv
157.991 209.823 156.727 209.843 156.225 209.843 cv
155.212 209.843 153.436 209.643 152.794 207.963 cv
152.553 207.293 152.573 206.573 152.573 205.833 cv
152.573 195.083 li
149.834 195.083 li
149.834 205.513 li
149.854 207.693 149.854 208.233 150.035 209.003 cv
150.376 210.123 151.309 211.013 153.125 211.443 cv
154.088 211.643 155.091 211.723 156.125 211.723 cv
157.279 211.723 159.506 211.633 161.042 210.713 cv
162.586 209.723 162.586 208.083 162.606 206.103 cv
162.606 195.083 li
159.868 195.083 li
cp
ef
174.807 211.963 mo
177.927 211.963 li
172.589 195.083 li
169.268 195.083 li
164.001 211.963 li
167.122 211.963 li
168.034 208.963 li
173.904 208.963 li
174.807 211.963 li
cp
168.807 207.083 mo
170.974 197.203 li
173.122 207.083 li
168.807 207.083 li
cp
ef
190.579 195.323 mo
178.92 195.323 li
178.92 197.203 li
183.335 197.203 li
183.335 211.963 li
186.074 211.963 li
186.074 197.203 li
190.579 197.203 li
190.579 195.323 li
cp
ef
203.883 197.203 mo
203.883 195.323 li
192.556 195.323 li
192.556 211.723 li
204.465 211.723 li
204.465 209.843 li
195.305 209.843 li
195.305 204.963 li
203.15 204.963 li
203.15 203.083 li
195.305 203.083 li
195.305 197.203 li
203.883 197.203 li
cp
ef
15.6602 240.973 mo
30.3887 240.973 li
32.0537 240.913 34.1978 240.843 35.7529 239.123 cv
36.8101 237.963 37.2788 236.203 37.2788 234.573 cv
37.2788 233.493 37.0796 232.073 35.9028 230.833 cv
35.0747 229.943 34.3174 229.713 33.4595 229.463 cv
34.1377 229.103 34.6665 228.853 35.2246 228.243 cv
36.0522 227.343 36.7002 225.803 36.7002 223.953 cv
36.7002 222.403 36.2217 220.903 35.2842 219.943 cv
33.7285 218.283 31.3154 218.183 29.8501 218.123 cv
15.6602 218.123 li
15.6602 240.973 li
cp
27.0977 222.883 mo
27.8452 222.923 29.6206 222.993 29.6206 225.053 cv
29.6206 227.153 27.6958 227.153 26.9185 227.153 cv
22.3608 227.153 li
22.3608 222.883 li
27.0977 222.883 li
cp
27.3267 231.893 mo
28.105 231.923 30.1792 232.013 30.1792 234.043 cv
30.1792 234.603 29.9692 235.123 29.6504 235.463 cv
29.0225 236.053 28.2441 236.083 27.5063 236.113 cv
22.3208 236.113 li
22.3208 231.893 li
27.3267 231.893 li
cp
ef
37.8569 232.963 mo
45.7148 232.963 li
45.7148 228.083 li
37.8569 228.083 li
37.8569 232.963 li
cp
ef
47.4004 236.593 mo
48.417 237.693 50.0229 239.483 53.3633 240.383 cv
54.9985 240.843 56.7437 240.983 58.4888 240.983 cv
59.7749 240.983 64.2822 240.983 66.9946 238.403 cv
67.9722 237.463 68.9092 235.973 68.9092 233.593 cv
68.9092 227.943 64.1626 227.033 59.147 226.163 cv
57.1328 225.813 55.9458 225.523 55.9458 224.423 cv
55.9458 223.263 57.332 222.943 58.5884 222.943 cv
59.7749 222.943 61.5503 223.133 62.8564 223.773 cv
63.7939 224.293 64.1626 224.813 64.502 225.263 cv
68.7598 221.653 li
68.002 220.903 67.2041 220.103 65.5889 219.353 cv
63.8237 218.523 61.52 218.063 58.8481 218.063 cv
54.7891 218.063 51.2495 219.243 49.8735 222.223 cv
49.4941 223.033 49.2847 224.073 49.2847 225.073 cv
49.2847 229.873 53.064 231.173 54.9985 231.713 cv
55.8662 231.943 60.1338 232.683 60.9614 232.973 cv
62.248 233.393 62.248 234.233 62.248 234.393 cv
62.248 236.043 59.3467 236.103 58.748 236.103 cv
57.6313 236.103 56.4448 235.913 55.5371 235.593 cv
53.7222 234.943 53.2134 234.103 52.6157 233.103 cv
47.4004 236.593 li
cp
ef
86.5693 231.703 mo
86.3096 232.433 85.3228 235.263 82.002 235.263 cv
78.4922 235.263 77.2456 232.223 77.2456 228.993 cv
77.2456 228.133 77.2456 225.673 78.9409 224.103 cv
79.4194 223.643 80.4067 222.943 81.9727 222.943 cv
84.9736 222.943 86.0605 225.243 86.6294 226.533 cv
92.5923 223.673 li
92.1138 222.823 91.6748 222.153 90.7178 221.273 cv
88.3545 219.133 85.103 218.063 81.6831 218.063 cv
74.314 218.063 70.585 223.553 70.585 229.393 cv
70.585 234.953 73.9351 241.023 81.6831 241.023 cv
84.9043 241.023 88.125 239.963 90.4282 237.693 cv
91.5151 236.603 92.0537 235.583 92.6323 234.523 cv
86.5693 231.703 li
cp
ef
93.8784 240.963 mo
100.54 240.963 li
100.54 231.863 li
107.839 231.863 li
107.839 240.963 li
114.5 240.963 li
114.5 218.083 li
107.839 218.083 li
107.839 226.183 li
100.54 226.183 li
100.54 218.083 li
93.8784 218.083 li
93.8784 240.963 li
cp
ef
129.029 218.023 mo
120.892 218.023 117.172 223.723 117.172 230.033 cv
117.172 235.063 119.755 241.883 128.899 241.883 cv
137.675 241.883 140.786 235.373 140.786 229.783 cv
140.786 224.533 137.854 218.023 129.029 218.023 cv
cp
129.029 223.723 mo
129.697 223.723 132.559 223.813 133.686 226.873 cv
134.025 227.753 134.125 228.723 134.125 229.783 cv
134.125 233.943 132.021 236.163 129.029 236.163 cv
125.499 236.163 123.834 233.843 123.834 230.003 cv
123.834 225.433 126.367 223.723 129.029 223.723 cv
cp
ef
154.317 218.023 mo
146.18 218.023 142.461 223.723 142.461 230.033 cv
142.461 235.063 145.044 241.883 154.188 241.883 cv
162.963 241.883 166.074 235.373 166.074 229.783 cv
166.074 224.533 163.143 218.023 154.317 218.023 cv
cp
154.317 223.723 mo
154.985 223.723 157.848 223.813 158.974 226.873 cv
159.313 227.753 159.413 228.723 159.413 229.783 cv
159.413 233.943 157.309 236.163 154.317 236.163 cv
150.787 236.163 149.122 233.843 149.122 230.003 cv
149.122 225.433 151.655 223.723 154.317 223.723 cv
cp
ef
167.75 241.023 mo
183.126 241.023 li
183.126 235.323 li
174.411 235.323 li
174.411 218.083 li
167.75 218.083 li
167.75 241.023 li
cp
ef
183.176 236.593 mo
184.193 237.693 185.798 239.483 189.139 240.383 cv
190.774 240.843 192.52 240.983 194.264 240.983 cv
195.551 240.983 200.058 240.983 202.77 238.403 cv
203.747 237.463 204.685 235.973 204.685 233.593 cv
204.685 227.943 199.938 227.033 194.923 226.163 cv
192.908 225.813 191.722 225.523 191.722 224.423 cv
191.722 223.263 193.107 222.943 194.364 222.943 cv
195.551 222.943 197.326 223.133 198.632 223.773 cv
199.569 224.293 199.938 224.813 200.277 225.263 cv
204.535 221.653 li
203.777 220.903 202.979 220.103 201.364 219.353 cv
199.6 218.523 197.296 218.063 194.623 218.063 cv
190.565 218.063 187.024 219.243 185.648 222.223 cv
185.27 223.033 185.061 224.073 185.061 225.073 cv
185.061 229.873 188.84 231.173 190.774 231.713 cv
191.642 231.943 195.91 232.683 196.737 232.973 cv
198.024 233.393 198.024 234.233 198.024 234.393 cv
198.024 236.043 195.122 236.103 194.523 236.103 cv
193.407 236.103 192.22 235.913 191.313 235.593 cv
189.498 234.943 188.989 234.103 188.391 233.103 cv
183.176 236.593 li
cp
ef
150.83 168.693 mo
.999998 101.769 li
.830074 101.693 li
.830074 101.693 .887493 101.635 .999998 101.521 cv
3.68558 98.8084 37.6347 64.5104 65.1409 36.5229 cv
65.4684 36.1896 65.7979 35.8544 66.1236 35.5229 cv
84.9454 16.3676 100.5 .41803 100.5 .0229501 cv
101.5 .0229501 li
101.5 .0229501 li
100.5 .0229501 li
100.5 53.0229 li
101.5 53.0229 li
266.5 53.0229 li
223 96.5229 li
222 97.5229 li
150.83 168.693 li
level3{
gsave
clp
[116.982 -103.332 103.332 116.982 72.3018 131.494 ]ct
/0 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~qnNL<r4rdArPK0HrkoHNrl#ZTs2>oYs2H)^s2Q8cs2ZGis2cVns2less2uu$s3!)(s3*5-s33D2s3<S9
s3<_?s3<eDs3<nJs3F%Os3F+Ts3F1Ys3O=^s3OCcs3XRjs3ORns3OXts3O_$s3Oe)s3On0s3Oq4s3P"9
s3G">s3G(Drm"tHrQ\qMr68hQqoreUqTN\YprdJ\pW@A`ouV/co#PienAfWhm`'Elm)=3olGIpqke_^t
k.uM#j1g,$i4af&hRnN(g:N*)f=?^+e@:C,d'eq-c*WP.ag.&.`it]0_QT<2^93p3\uqU5[]Q46ZE0h7
~>
/BitsPerSample 8
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 0 1 ]
/Size [64 ]
>>
]
/Bounds []
/Encode [0 1 ]
>>
>>/Gradient add_res /0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[116.982 -103.332 103.332 116.982 72.3018 131.494 ]ct
clp
/0 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 4 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~qYU0equ$Bir;HTmrVc]nrVlfqrr<#us8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!
s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!
s8W-!s8W,urr2oqrVc]mr;?Kiqtp9eqYL'aq=saZp\4FUp@\+NoCMPCnaQ&:n*]W2mHj3*lg!d"l0.?o
kND!ijlGI^io/hRhr!;Ih;$c=g"=s/f%&=#e'cXjcd'h\bfe/NaN)?@`Pf[2_8*h"]tCtg\[],W[C!9G
~>
<~^VIY#^qmk(_Sa:/_o0L3`5KU4`5T^7`Q#p;`lH-?a2l?CaN;QGai_cKb0%lLb0.uObKS2Sbg"DWc-=MX
c-=MXc-=MXc-=PZcHa_\cHa_\cHab^cd0q`cd0tbd*U.dd*U+bcd0q`cd0q`cd0q`cd0q`cd0q`cd0q`
cd0q_cHa_\cHa_[c-=MXc-=MWbfn;Tbfn;SbKJ)Ob0%lKaiVZGaN2HCa2c6?`l?$;`Pog7`5BL0_SX1+
_83t(^qd_"^:q=q]tM(k]=Y\e]"5G_\@B&Y\$rfS[C*BKZa6sCZ*CO;YHP.5Y-+q1Xf\_-Xf\_-XK8M)
~>
<~#RLhG$OdIS%hK<c&ebro()If*)B0Y9*?H:E+<_pQ,:"Q]-7:2i.4Qhu/1iG+0/,(70etL?1c7-K2`NfY
3]fGd4Zttn5X7V$6:+%,6psI47Rfm<84Z<D8kM`M9MJ8W:JXe`;,L4h;c?Xp<E3(#='/U.=]np3>?b?;
>[:WA?=.&I?t!JQ@UinYA7]=aAnPaiBPD0qC27U$Ci+$,DJsH4E,fl<EcZ;DFEM_LG'A.TG^4R\H@(!d
I!g?jIXZcrJ:N3%JqAW-KS5&5L5(J=LkpnEMMmCONK&sYO,oBaOcklkPa%H!Q^=)-R[T_9SXl@ETV/!Q
~>
<~zzz!!**$!<E3%!<N<(!WrN,!sA`1"U5/8"pYA<#7(SA#mq"H$4@4M$k3XT%1WjY&.oKe&eYil'bqK#(`
4,.)B'P7*??1C+<VgN+sJ6W,UFcb-R^Dn.P!&%/h\n40etO@1c70M3&s#\4$5Yh5!M:u5sdq,77Kd<8P
2WL9hnJ\;,U=l<E<.%=BSg3>[:ZC?t!MSA7]@cBPD3sCi+'.E,fr@F`qtRH$XgbI=?ZrJV&N-KnbA=M2
I4MNK0']OckomQ'[l+R[]e:SXuIHTq\<XV5C/hWN*##Xfek3Z*CU@['[6L\$rlX]"5Md~>
]
>>
0 0 1 0 []true true []
/DeviceCMYK
GenStrips
} /Gradient add_res /0 /Gradient get_res exec grestore
}if
np
15.4702 80.8228 mo
32.6602 80.8228 li
32.6602 131.963 li
54.3398 131.963 li
54.3398 80.8228 li
71.5298 80.8228 li
71.5298 64.0229 li
15.4702 64.0229 li
15.4702 80.8228 li
cp
3.0518e-05 3.0518e-05 3.0518e-05 3.0518e-05 cmyk
ef
75.6602 131.963 mo
97.3398 131.963 li
97.3398 105.963 li
117.66 105.963 li
117.66 131.963 li
139.34 131.963 li
139.34 64.083 li
117.66 64.083 li
117.66 89.083 li
97.3398 89.083 li
97.3398 64.083 li
75.6602 64.083 li
75.6602 131.963 li
cp
ef
147.66 132.023 mo
204.38 132.023 li
204.38 117.143 li
169.34 117.143 li
169.34 103.963 li
199.39 103.963 li
199.39 89.083 li
169.34 89.083 li
169.34 78.9028 li
201.5 78.9028 li
201.5 64.0229 li
147.66 64.0229 li
147.66 132.023 li
cp
ef
101.5 .0229501 mo
266.5 .0229501 li
266.5 53.0229 li
101.5 53.0229 li
101.5 .0229501 li
.75021 .679683 .670222 .90164 cmyk
ef
218.52 18.3228 mo
218.52 16.8428 217.82 15.6431 216.62 15.6431 cv
215.46 15.6431 214.72 16.7031 214.72 18.3228 cv
214.72 19.9229 215.46 21.0728 216.62 21.0728 cv
217.82 21.0728 218.52 19.8931 218.52 18.3228 cv
cp
210.92 24.7529 mo
214.89 24.7529 li
215.05 25.2529 215.57 25.7632 216.55 25.7632 cv
217.88 25.7632 218.34 24.9229 218.34 23.6831 cv
218.34 22.8027 li
218.25 22.8027 li
217.6 23.5728 216.73 24.1528 215.44 24.1528 cv
212.91 24.1528 210.71 22.2432 210.71 18.5229 cv
210.71 15.1128 212.52 12.4531 215.24 12.4531 cv
216.81 12.4531 217.77 13.0928 218.41 14.1128 cv
218.47 14.1128 li
218.47 12.813 li
222.4 12.813 li
222.4 23.1328 li
222.4 25.0327 221.75 26.5229 220.76 27.4028 cv
219.74 28.333 218.28 28.7129 216.62 28.7129 cv
213.5 28.7129 211.32 27.4028 210.92 24.7529 cv
cp
.0552377 .0326848 .927153 3.0518e-05 cmyk
ef
206.32 14.8428 mo
206.39 14.8428 li
207.24 13.1831 208.35 12.563 209.77 12.563 cv
210.09 12.563 210.31 12.6128 210.44 12.6729 cv
210.44 16.333 li
210.36 16.333 li
207.93 15.8828 206.52 17.063 206.52 19.7432 cv
206.52 24.7231 li
202.39 24.7231 li
202.39 12.813 li
206.32 12.813 li
206.32 14.8428 li
cp
f
119.77 14.5527 mo
120.64 14.5527 121.27 14.0728 121.27 13.0928 cv
121.27 12.1431 120.62 11.6831 119.74 11.6831 cv
116.97 11.6831 li
116.97 14.5527 li
119.77 14.5527 li
cp
120.18 21.0229 mo
121.16 21.0229 121.88 20.4331 121.88 19.3228 cv
121.88 18.1729 121.1 17.6128 120.16 17.6128 cv
116.97 17.6128 li
116.97 21.0229 li
120.18 21.0229 li
cp
112.5 8.02295 mo
120.57 8.02295 li
122.1 8.02295 123.28 8.40283 124.11 9.08301 cv
125.04 9.86279 125.55 11.0132 125.55 12.3828 cv
125.55 13.9829 124.91 14.9829 123.6 15.603 cv
123.6 15.6631 li
125.31 16.2432 126.29 17.793 126.29 19.6729 cv
126.29 21.4731 125.61 22.8628 124.5 23.7031 cv
123.56 24.3931 122.34 24.7231 120.73 24.7231 cv
112.5 24.7231 li
112.5 8.02295 li
cp
ef
127.03 8.02295 mo
131.26 8.02295 li
131.26 24.7231 li
127.03 24.7231 li
127.03 8.02295 li
cp
f
140.06 18.793 mo
140.06 16.7031 139.4 15.4028 138.14 15.4028 cv
136.87 15.4028 136.26 16.7031 136.26 18.793 cv
136.26 20.8931 136.87 22.2031 138.14 22.2031 cv
139.4 22.2031 140.06 20.8931 140.06 18.793 cv
cp
132.07 18.793 mo
132.07 15.0229 134.47 12.4731 138.18 12.4731 cv
141.89 12.4731 144.24 15.0229 144.24 18.793 cv
144.24 22.5728 141.89 25.103 138.18 25.103 cv
134.47 25.103 132.07 22.5728 132.07 18.793 cv
cp
ef
152.71 18.793 mo
152.71 16.7031 152.06 15.4028 150.79 15.4028 cv
149.53 15.4028 148.92 16.7031 148.92 18.793 cv
148.92 20.8931 149.53 22.2031 150.79 22.2031 cv
152.06 22.2031 152.71 20.8931 152.71 18.793 cv
cp
144.73 18.793 mo
144.73 15.0229 147.13 12.4731 150.83 12.4731 cv
154.54 12.4731 156.9 15.0229 156.9 18.793 cv
156.9 22.5728 154.54 25.103 150.83 25.103 cv
147.13 25.103 144.73 22.5728 144.73 18.793 cv
cp
ef
157.71 12.813 mo
161.64 12.813 li
161.64 14.603 li
161.7 14.603 li
162.49 13.2031 163.55 12.4531 165.23 12.4531 cv
166.72 12.4531 167.83 13.2031 168.4 14.5132 cv
168.46 14.5132 li
169.42 12.9429 170.67 12.4531 172.11 12.4531 cv
174.83 12.4531 176.01 14.4932 176.01 17.2432 cv
176.01 24.7231 li
171.89 24.7231 li
171.89 17.9932 li
171.89 16.7729 171.52 15.9731 170.47 15.9731 cv
169.45 15.9731 168.92 16.9531 168.92 18.2329 cv
168.92 24.7231 li
164.8 24.7231 li
164.8 17.9932 li
164.8 16.7729 164.43 15.9731 163.38 15.9731 cv
162.35 15.9731 161.83 16.9531 161.83 18.2329 cv
161.83 24.7231 li
157.71 24.7231 li
157.71 12.813 li
cp
f
185.07 18.7031 mo
185.07 16.7729 184.37 15.5327 183.13 15.5327 cv
181.86 15.5327 181.05 16.7729 181.05 18.7031 cv
181.05 20.603 181.86 21.873 183.13 21.873 cv
184.39 21.873 185.07 20.623 185.07 18.7031 cv
cp
181.05 23.1729 mo
181.01 23.1729 li
181.01 24.7231 li
177.08 24.7231 li
177.08 8.02295 li
181.21 8.02295 li
181.21 14.0527 li
181.27 14.0527 li
182.06 13.0029 183.1 12.4531 184.61 12.4531 cv
187.56 12.4531 189.26 15.1528 189.26 18.7432 cv
189.26 22.8027 187.4 25.123 184.35 25.123 cv
183.08 25.123 181.77 24.5029 181.05 23.1729 cv
cp
ef
193.88 17.5029 mo
197.64 17.5029 li
197.57 16.063 196.78 15.313 195.8 15.313 cv
194.67 15.313 194.04 16.1328 193.88 17.5029 cv
cp
189.78 18.7432 mo
189.78 15.0229 192.2 12.4331 195.72 12.4331 cv
197.46 12.4331 198.81 12.9829 199.84 13.9829 cv
201.19 15.313 201.8 17.3931 201.76 19.853 cv
193.88 19.853 li
194.06 21.333 194.76 22.0928 196 22.0928 cv
196.72 22.0928 197.35 21.7529 197.61 20.9629 cv
201.58 20.9629 li
200.89 23.6831 198.81 25.063 195.87 25.063 cv
192.23 25.063 189.78 22.5527 189.78 18.7432 cv
cp
ef
249.61 38.2827 mo
248.76 39.2827 li
248.76 42.623 li
244.7 42.623 li
244.7 25.9229 li
248.76 25.9229 li
248.76 34.3428 li
251.53 30.7031 li
256.06 30.7031 li
252.35 35.1128 li
256.5 42.623 li
251.83 42.623 li
249.61 38.2827 li
cp
f
119.77 32.4531 mo
120.64 32.4531 121.27 31.9731 121.27 30.9932 cv
121.27 30.043 120.62 29.5728 119.74 29.5728 cv
116.97 29.5728 li
116.97 32.4531 li
119.77 32.4531 li
cp
120.18 38.9229 mo
121.16 38.9229 121.88 38.3228 121.88 37.2231 cv
121.88 36.063 121.1 35.5132 120.16 35.5132 cv
116.97 35.5132 li
116.97 38.9229 li
120.18 38.9229 li
cp
112.5 25.9229 mo
120.57 25.9229 li
122.1 25.9229 123.28 26.293 124.11 26.9829 cv
125.04 27.7632 125.55 28.9131 125.55 30.2827 cv
125.55 31.8828 124.91 32.873 123.6 33.4932 cv
123.6 33.563 li
125.31 34.1431 126.29 35.6929 126.29 37.5728 cv
126.29 39.3628 125.61 40.7632 124.5 41.603 cv
123.56 42.293 122.34 42.623 120.73 42.623 cv
112.5 42.623 li
112.5 25.9229 li
cp
ef
134.45 42.623 mo
134.45 41.0728 li
134.38 41.0728 li
133.53 42.313 132.44 43.0029 130.91 43.0029 cv
128.25 43.0029 126.94 41.1431 126.94 38.3931 cv
126.94 30.7031 li
131.07 30.7031 li
131.07 37.4629 li
131.07 38.813 131.57 39.3428 132.55 39.3428 cv
133.62 39.3428 134.25 38.6128 134.25 37.2432 cv
134.25 30.7031 li
138.38 30.7031 li
138.38 42.623 li
134.45 42.623 li
cp
f
139.03 38.853 mo
142.85 38.853 li
142.91 39.833 143.48 40.4131 144.53 40.4131 cv
145.34 40.4131 145.95 40.1631 145.95 39.3428 cv
145.95 38.373 144.66 38.3027 143.22 38.063 cv
141.34 37.7729 139.18 37.1528 139.18 34.1631 cv
139.18 31.7231 141.52 30.353 144.25 30.353 cv
147.63 30.353 149.39 31.7031 149.55 34.0327 cv
145.66 34.0327 li
145.55 33.1431 144.94 32.9028 144.27 32.9028 cv
143.66 32.9028 143.09 33.1431 143.09 33.833 cv
143.09 34.4932 144.11 34.6729 145.38 34.853 cv
147.41 35.1631 149.98 35.6431 149.98 38.9429 cv
149.98 41.8027 147.56 43.0229 144.51 43.0229 cv
141.21 43.0229 139.05 41.583 139.03 38.853 cv
cp
f
150.66 26.4131 mo
154.78 26.4131 li
154.78 29.7529 li
150.66 29.7529 li
150.66 26.4131 li
cp
150.66 30.7031 mo
154.78 30.7031 li
154.78 42.623 li
150.66 42.623 li
150.66 30.7031 li
cp
ef
159.87 32.3428 mo
159.93 32.3428 li
160.83 31.043 161.96 30.353 163.51 30.353 cv
166.09 30.353 167.42 32.1929 167.42 34.9131 cv
167.42 42.623 li
163.29 42.623 li
163.29 35.8931 li
163.29 34.563 162.81 33.833 161.74 33.833 cv
160.7 33.833 160.06 34.7129 160.06 36.0928 cv
160.06 42.623 li
155.94 42.623 li
155.94 30.7031 li
159.87 30.7031 li
159.87 32.3428 li
cp
f
172.24 35.4028 mo
175.99 35.4028 li
175.93 33.9629 175.14 33.2129 174.16 33.2129 cv
173.02 33.2129 172.39 34.0327 172.24 35.4028 cv
cp
168.14 36.6431 mo
168.14 32.9229 170.56 30.333 174.07 30.333 cv
175.82 30.333 177.17 30.8828 178.2 31.8828 cv
179.55 33.2129 180.16 35.293 180.12 37.7529 cv
172.24 37.7529 li
172.41 39.2329 173.11 39.9932 174.36 39.9932 cv
175.08 39.9932 175.71 39.6528 175.97 38.853 cv
179.94 38.853 li
179.24 41.583 177.17 42.9531 174.22 42.9531 cv
170.58 42.9531 168.14 40.4531 168.14 36.6431 cv
cp
ef
180.53 38.853 mo
184.35 38.853 li
184.41 39.833 184.98 40.4131 186.03 40.4131 cv
186.83 40.4131 187.44 40.1631 187.44 39.3428 cv
187.44 38.373 186.16 38.3027 184.72 38.063 cv
182.84 37.7729 180.68 37.1528 180.68 34.1631 cv
180.68 31.7231 183.02 30.353 185.74 30.353 cv
189.12 30.353 190.89 31.7031 191.04 34.0327 cv
187.16 34.0327 li
187.05 33.1431 186.44 32.9028 185.76 32.9028 cv
185.15 32.9028 184.59 33.1431 184.59 33.833 cv
184.59 34.4932 185.61 34.6729 186.88 34.853 cv
188.91 35.1631 191.48 35.6431 191.48 38.9429 cv
191.48 41.8027 189.06 43.0229 186 43.0229 cv
182.71 43.0229 180.55 41.583 180.53 38.853 cv
cp
f
191.92 38.853 mo
195.74 38.853 li
195.8 39.833 196.37 40.4131 197.42 40.4131 cv
198.22 40.4131 198.83 40.1631 198.83 39.3428 cv
198.83 38.373 197.55 38.3027 196.11 38.063 cv
194.23 37.7729 192.07 37.1528 192.07 34.1631 cv
192.07 31.7231 194.41 30.353 197.13 30.353 cv
200.51 30.353 202.28 31.7031 202.43 34.0327 cv
198.55 34.0327 li
198.44 33.1431 197.83 32.9028 197.15 32.9028 cv
196.54 32.9028 195.98 33.1431 195.98 33.833 cv
195.98 34.4932 197 34.6729 198.27 34.853 cv
200.3 35.1631 202.87 35.6431 202.87 38.9429 cv
202.87 41.8027 200.45 43.0229 197.4 43.0229 cv
194.1 43.0229 191.94 41.583 191.92 38.853 cv
cp
f
202.13 30.7031 mo
206.34 30.7031 li
207.5 37.0229 li
209.48 30.7031 li
213.06 30.7031 li
214.57 37.2632 li
214.61 37.2632 li
216.2 30.7031 li
220.32 30.7031 li
216.79 42.623 li
212.82 42.623 li
211.23 35.6729 li
211.18 35.6729 li
209.59 42.623 li
205.69 42.623 li
202.13 30.7031 li
cp
f
223.73 35.4028 mo
227.48 35.4028 li
227.42 33.9629 226.63 33.2129 225.65 33.2129 cv
224.52 33.2129 223.88 34.0327 223.73 35.4028 cv
cp
219.63 36.6431 mo
219.63 32.9229 222.05 30.333 225.56 30.333 cv
227.31 30.333 228.66 30.8828 229.68 31.8828 cv
231.04 33.2129 231.65 35.293 231.6 37.7529 cv
223.73 37.7529 li
223.9 39.2329 224.6 39.9932 225.85 39.9932 cv
226.57 39.9932 227.2 39.6528 227.46 38.853 cv
231.43 38.853 li
230.73 41.583 228.66 42.9531 225.72 42.9531 cv
222.07 42.9531 219.63 40.4531 219.63 36.6431 cv
cp
ef
236.19 35.4028 mo
239.94 35.4028 li
239.87 33.9629 239.09 33.2129 238.11 33.2129 cv
236.97 33.2129 236.34 34.0327 236.19 35.4028 cv
cp
232.09 36.6431 mo
232.09 32.9229 234.51 30.333 238.02 30.333 cv
239.77 30.333 241.12 30.8828 242.14 31.8828 cv
243.5 33.2129 244.11 35.293 244.06 37.7529 cv
236.19 37.7529 li
236.36 39.2329 237.06 39.9932 238.3 39.9932 cv
239.02 39.9932 239.66 39.6528 239.92 38.853 cv
243.89 38.853 li
243.19 41.583 241.12 42.9531 238.17 42.9531 cv
234.53 42.9531 232.09 40.4531 232.09 36.6431 cv
cp
ef
101.5 53.0229 mo
100.5 53.0229 li
100.5 .0229501 li
101.5 .0229501 li
101.5 53.0229 li
gsave
/0 /CSA get_res setcolorspace
clp
[1 0 0 -1 0 260.523 ]ct
[2.4 0 0 54.24 99.84 206.763 ]ct
snap_to_device
Adobe_AGM_Image/AGMIMG_fl cf /ASCII85Decode fl /RunLengthDecode filter ddf
<<
/T 1
/W 5 
/H 113 
/M[5 0 0 -113 0 113 ]
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS [
[AGMIMG_fl 5 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 5 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 5 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 5 string /rs cvx /pop cvx] cvx
]
/O 3
>>
%%BeginBinary: 1
img
rC-cUr@\1*-iPOp./X)C7f4n>-iGLl!;o=a1&iU"./X)C9)LID./tdp!;oRh1&rd%/,TDF;>`<L/GoMG
<<"rW3;bE,!;oms3WD/>/cRI$!;p("3rhGB0E<d(!;p.#4o[/60`1qK@Ji@h1&j'-!<6X0AGedn1B03/
!!HtLBkM)V70>>'2)G:iqu?k9Ci+$)r($cFr\s`Tr,DR+r\sj:quHY9r(HrIquHY<r_<Dgr]'p<quHY?
r)!>P!'C)Yr-SKCrDEVUrB'oW!.b#ur)E\Xr]U8]rW2qLr)W_YquQ_Lr)in\!'gA^r/(>Tr'1)[r/CP[
r'(#Z!07#=!*oJ/!($QJquQ_Yra5e8?pFTUquZe\r*fLiquctcrg*Lm"_C"e6psE?"8nSbBDb*o"T4eg
BE2]D6NBRQ"T4niCA^Hs"oP(lD#?a""oP1oDYus$#5k@rDuE*)8,WVl#Q1S$EW1%Z7K,dS#QCh)X8I)=
7K5mU#l^t+Y5WSDGQ(,47f3SjYl/bHGt7j*!D!Oq$NIF2ZM\tF8Giep[/I?/Hi-G4$iIO4J,Dk8$imm;
\HRP7J:W8ArCHttr=/e=rjr#Zs%!&[rser;r4W#[r(?ktr4i2b!/CDDr"/eBr.b8DrCR&$r=StGr/1DE
r"8qJs2Ftqs,-eKs%WJ*rtG@O!64tr!/peK!)<D*!#5@Qr/UhNrCm8+r>#@Vrlb>*rf[:Rr_*;,!#>JK
r6>2(!0mFV!)*8,!>a&\cN'70QN<CGr_!8c(]G0M)#Vb]QMm3K9`Q%/)?84ce,Pj8S,Z1]:&Gn.ec4.u
S,]&W:&Gq.ecF<lrgX"\9`7]d)>tNRf`0V%TDqXb:]DF6*W4UjU&L_b:B"&h*W@,Xg]!uJUAdme:Au47
*Zj/9g]4/LUB.)ar_EPk*r[5]+T1-sW;`^p:&[rg*r[;[hu9PRVZ'Bk;#VU;+oL:%W2QbsWX2Hs:/Fb1
+WqsQr8R^U!N`@$:]X?gr?;4dr8S0dXK/D(:JXe`:Eh"^,66m)jnu:Z;#DRFkih3mk-2(pZ*4+%!)`\?
!%%X/!pJgRriuR0:B"#i;'Z&d!%.[0!pR)!rj2W#r_WV?r[.R/r3ZB!r$VF/rO)^6rD3Jkr?_Onm/?;O
[JdT8;>j>h./`N5\Gj&=;#X>l./k[nn,Blt])GS,;Z8-F.fAf7\cBD@;Z/'G/+NW.!V!]!\H#P+;ZJ<G
/H>>@o)HH'^&Lt/;u\BI/cPDBoDZQ*^A_%1<;nHK0)YA?^Au"H;?0\p/-.BsrUg0-rP8J2rDN\Ir@J'D
p\sje_8H8h!E2nq;u\HK0E1\Np@cA?`P]Sl%T?8)<%fmW0JN:sp\4C"rkecR;uT_s<A+8)!&FKI%`?3$
`PkeU<E)pO0JY@;r:p`?`l5p;;c?[r<%fp(1&UnIa8a0Y<<#tt1&j'.q>pE4rl+uX<;oku=#'\1!&XWN
r5ee9r\FL/rr)lprlY8_r`&ntr\FL1rVQZmrQ,&\rD`i!rA4L4r;6Q:rQ>1@rDinTrAFWSrr)l@rlY7@
r`9%Tr\aWPrlY8br`9&#r\a^7r;HT9!6b:BrAOa:s8Dosc2Gid<rH)"2>oK6s8Musbl5fc=8l>%2uYf7
s8L=Dc2LcD=T15Y3;rjWrr((Abl(WD=oC;[3rK!Xc2Grg=T)>!3;igVc2Q#d=T:A[3W/pVcMu8k=oMS'
3r_;>s8C4Cd/7&F3WM8>rrCCDc2^rE=TCG[3rK$Ud/R5I=oUM]48f-Xd/VGk=oV\)49%JAs8C:FcWL0L
!EqM_3rhGAs8:7D=T2J'3WD/@48f*ZcdMg?s&o>)!BW@A4T,3^cd1%edJd8Q>$=!L3]oP&rsmB#dF$<D
>?Y374$>\g55bEjcd0nad90UV>$=!L4Zkk)s8L=FcI)Vo!F&b,3rqK,J,~>

%%EndBinary
grestore
np
266.5 53.0229 mo
266.5 53.0229 li
101.5 53.0229 li
101.5 52.0229 li
266.5 52.0229 li
266.5 53.0229 li
gsave
/0 /CSA get_res setcolorspace
clp
[1 0 0 -1 0 260.523 ]ct
[166.56 0 0 2.4 100.8 206.763 ]ct
snap_to_device
Adobe_AGM_Image/AGMIMG_fl cf /ASCII85Decode fl /RunLengthDecode filter ddf
<<
/T 1
/W 347 
/H 5 
/M[347 0 0 -5 0 5 ]
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS [
[AGMIMG_fl 347 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 347 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 347 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 347 string /rs cvx /pop cvx] cvx
]
/O 3
>>
%%BeginBinary: 1
img
rkJ9Eqn_m@rkn`RrPSTPqo/TTs2FlTr5\cWrlP,]!6P5_#gCK8bfnAXc-?.3!R]9ndK@nGe'e6Er7(_r
"P2,Sf%'ZKqptf!q:5Ptp=B/krR1brqpGbtda?Ijd*^7fqTo)a!mJm5rlYDfb0/!,ao0<Za8O!W`;[[R
_#V@O_#_?drk8KJ]Y(lS])K8>\Gio:[/dW3Zi.-4Yck44XfVN&ri-!uW;`^oV#[=jUBI<bTV.qVT)G2Z
Rf8ZSQi<6hP`q;oOcb`dNfK*YMi3ILLkphAL5(D8K7ec,rdXoqrd4XHriZ1$riZ7&s/u=&q6'_!riQ7'
riZ:)s/l1$#-Y55Y-5%3rilC*r36"%rNc:+q6U12[/RK9[C<WQr3uR3"h;+Q\@/pH[0!kJ[J[K8[^N[D
[Kj=M[C<ZR[C?(Bs0_m5rNZO2ZE^b8Z2Lp+Y6;#2Xf\c*XoGL&Xo,4$WiE-!W<fN(WMuepW2QTmV>R.g
U]$hgT:hgKT_tG]S-,7NS=BMHs-N_Prg3VL"I,+7P`u'.#`t(,OH,<[NfNsn"GhhgLkkq_!/(B+KD^?$
JH(,tI1UaPI!L$aH$FOWG]e.PF*)O&ErU+XDuOYQC]J8MCAhiFB)\k.WrK'tW;`dnW;`^jVZ*ClVZ*Fl
V#R:iU^3`jU8"EXU8"FYU&UbdTV)%Orgj%Yqj[SRrg<eSRJrNTR$X/,p6PZA!L8lJPld/5PkpR@OU$r/
OH5E`OH00sq2PK8Mu/M2N;8D3M#N;1M#`>1M#`>1L'39dKnY<[LAQ])LAci+K`-N&Jbt&rJbOZmIL(FO
I=-EjI=$DAHiSHkI/S<pH?jd\H$Xf8G6rG:F`heJF`heJrcJ<`F)u@#ErU.VE;jbVE,GJh!,VRKrb;XO
BP;*nAnM$TroX4AroF";ro3t:rS[\4r8.G/rnRJ,rS%5's4I;%rmq)!r6tYn!7Cemr6PAerlkDcs2k;`
rlG)Z!QE(W`;[[R_>h=M^AbhG]DfD?\Giu:[K!T4YlM!,Xo>C"W;rjqV>m=hT`1P^S,f#VR/W?NPQ$^E
O8b.<MuSV5L&Qc*K)^B"IKb%DG^+FTrcA'Ys)7mRrbDjTBkM'iARf4Y?sj%D?=*V8"'Si1=T2A$<;obo
:]=&g9E%N_8,bpU630A;r]U<Er]C*="?/4r2)P:g#V[qc0.eb+.k:NI"=GQD-7/X9"X5*4+<M[(*W@#W
)#tNQ(BbHf'GM5[&d8jZ&.f?^rXJi8rX/Y>qnW6Iqn_m@rkn`RrPSTPqo/TTs2FlTr5\cWrlP,]!6P5_
#gCK8bfnAXc-?.3!R]9ndK@nGe'e6Er7(_r"P2,Sf%'HE!nZ&TqUPYup=B/krR1brqpGbtda?Ijd*^7f
qTo)a!mJm5rlYDfb0/!,ao0<Za8O!W`;[[R_#V@O_#_?drk8KJ]Y(lS])K8>\Gir:[JR<1Ym7P=Yck44
XfVN&ri-!uW;`^oV#[=jUBI<bTV.qVT)G2ZRf8ZSQi<6hP`q;oOcb`dNfK*YMi3ILLkphAL5(D8K7ec,
rdXoqrd4XHriZ1$riZ7&s/u=&q6'_!riQ7'riZ:)s/l1$#-Y55Y-5%3rilC*r36"%rNc:+q6U12[/RK9
[C<WQr3uR3"h;+Q\@/pH[0!kJ[J[K8[^N[D[Kj=M[C<ZR[C?(Bs0_m5qm$7-Zi760YlCs,Y6;#2Xf\c*
XoGL&Xo,4$WiE-!W<fN(WMuepW2QTmV>R.gU]$hgT:hgKT_tG]S-,7NS=BMHs-N_Prg3VL"I,+7P`u'.
#`t(,OH,<[NfNsn"GhhgLkkq_!ec5Zr.=s!s*suq&:8bOH$Xd^G^"@VF`hkKFEIJ%s)@sUrbh[N!,MRK
rFl1Bri>prs/H!rri,dnrhoRhrhTUlrh]Xjs/#[i#c"/hU8+KXU8.OXrh'7`qOR\Yrgj%Yqj[SRrg<eS
RJrNTR$X/,p6PZA!L8lJPld/5PkpR@OU$r/OH5E`OH00sq2PK8Mu/M2N;8D3M#N;1M#`>1M#`>1L&m'a
!el>`r.b*&s+^K+s+L?&s+1'!qgnKkrI,$%I=6KjI=6Hjrd4]krd=Zi#'tQ?G^4U]rHAQkGBJ%MFEM_J
FT-CbEcZ;Arc8$Yqf)OQ!-%dO!c2XfrbMLJ#&.aaBkV*jrb)5mroO.?r8[e9s5Eq7rnmY1rn[S/rS.;)
rRq5'rR_&"rmgqqrmCeorm:ShrltGds3(Gas2t>^rl5&Y`r3jT_u@IR^qd\a^AbhG]DfD?\Giu:[K!T4
YlM!,Xo>C"W;rjqV>m=hT`1P^S,f#VR/W?NPQ$^EO8b.<MuSV5L&Qc*K)^B"IKb%DG^+FTrcA'Ys)7mR
rbDdRBkM'iARf4Yra>b4r`]G-=]k`,r`9%ur_`Yjr_3Acr^m,[r^?`P!C9!M4od_E48q2B2`<NN2#]9:
0JG.5/M/J'.fLk"-RU5f-2o+m+sA'O+!1D%rYthS!#Y\O";MXc'GLHY"VD=X&.]9M%K6e8$N@g9_#(qJ
_Xt_E_u@UQ_u7ON`W*sX`V[[Qa8O*Yao0?^ao9Egbfe2Rbg+MYc25ffdEqm@"4>THdf._neGdu$f%&@&
eb.MnfD3tuf@K]Ir7(\o!7^no#gq)JdF-ChdEqa9r65;ebg$.1"3ep2bPfQ]aSj0X`W*mU_u@IP_Z%@P
^q]l_"22@[]DT8>\c0,<[f<c4Zi.-5Yck44XfST'X8]+"WMoforhTUjrhBUjTqJ'Nrgs(Ys-iqS!13\M
)jHPMP*(lgO,f6[NJi^PM26tCLPCP;KS+o/Jc:/uIK"TmXo>L$Xo>L&XoGR&Xnf.!Xo>I'Xo>L'YQ(a%
XoPX/YHG%3YHIl/ric7(q6Bn(qQp")!OfB7[KEqH\$c.CqmH[<\[]/X\Gil;\@AsE[fX"H\,E`?\@&`R
\@&`Rr3lX5s0MU.!O9!1Z2Lp+YQ(d*XT5O'XoGL&Xo,4$WiE-!W<fN(WMuepW2QTmV>R.gU]$hgT:hgK
T_tG]S-,7NS=BMHs-N_Prg3VL"I,+7P`u'.#`t(,OH,<[NfNsn"GhhgLkkq_!ec5Zr.=s!s*suq!df9A
%=*8GH$FOWG]e.PF*)O&ErU+XDuOYQC]J8MCAhiFB)\k.WrK'tW;`dnW;`^jVZ*ClVZ*FlV#R:iU^3`j
U8"EXU8"FYU&L\bTD>)XSc5/ZS,JiURf8]UR$mr?".5FAR.cjEPQ@&5rfmPKPEbp,r/h5FOH>N`OH>M!
NVSS8NJm[nqi(?/s+pZ3rJ:N0reUW1re:Q2L4t>:r.Y3*r.Y0*rIt9)rIY'#qh"]rpOE-j#_.8NI!g?j
H[Ym@!."QkrHSTnH$OX[H@#O6$$LN8F`__JF`_a)FTZZ*F)h2"s)IpTrbhdUqJ?4Kr+l:H!bl=]")2F\
B)ZHBk5OKAjS\';irA!9i;VX3hYu@1h#6"+gAT_)f_sG$f)F4te,IbqdJhMjci22gbl>ldaoBN_aSs3\
`Q%kprkn`Os1nWJrk8?Drjr'<s0i!;rjDd4rilI,riQ1#rM]dprh]XirLj.]rgWtWrL!SL!0dDEs,[/=
repf4s+UH*s+:9$rI+orH?a[YFoHI]EW9tVD>n;VBk_3mAS#@]@K'[7?N+.2>$5!1r`9%ur_`Yjr_3Ac
r^m,[r^?`P!C9!M4od_E48q2B2`<NN2#]9:0JG.5/M/J'.fLk"-RU5f-2o+m+sA'O+!1D%rYthS!#Y\O
";MXc'GLHY"VD=X&.]9M%K6e8$N@g9_#(t>_Z%IP`;RUP`;@OR`rF$T`r*mUaSs<[aoKQ_ap?57bKS2U
cHXW2cN2G?rmCnre'lbEe,7_peHFIRf%/CEf)O@tec==qf)4"te,IereGIZ"dF-Fida6Chd/))dblZ,5
c2Plgbf\,PrQ5#ZrQ"lUs2=oSrkSTOrkSWN^](qL]tD"ir4;m<rj_s9s0_a1rNQO1YHG%1XT#:"WWB)t
rhoal!i2Td"f%fcTV.qVT)G2ZRf8ZSQi<6hP`q;oOcb`dNfK*YMi3ILLkphAL5(D8K7ec,rdXoqrd4XH
riZ1$riZ7&s/u=&q6'_!riQ7'riZ:)s/l1$#-Y55Y-5%3rilC*rNH:+q6Bn(qQp")!OfB7[KEqH\$c.C
qmH[<\[]/X\Gil;\@AsE[fX"H\,E`?\@&`R\@&`Rr3lX5s0MU.!O9!1Z2Lp+Y6;#2Xf\c*XoGL&Xo,4$
WiE-!W<fN(WMuepW2QTmV>R.gU]$hgT:hgKT_tG]S-,7NS=BMHs-N_Prg3VL"I,+7P`u'.#`t(,OH,<[
NfNsn"GhhgLkkq_!ec5Zr.=s!s*suq&pntQH$Xd^G^"@VF`hkKFEDPDs)S-YrbqdRrG2ILrbDCFrau/1
ql9[qri#gqql'Llq54.f!2fals.o[krM0^oUS=KXUS=KXq4[e\!2'(Yrgj%Yqj[SRrg<eSRJrNQQi`V@
R.cjEPQ@&5rfmPKPEbp,r/h5FOH>N`OH>M!NVSS8NJm[nqi(?/s+pZ3rJ:N0reUW1re:Q2L4t>:r.b*&
s+^K+s+LB'!ePuSqh"]rpOE-j#_.8NI!g?jH[Ym@!."QkrHSTnH$OX[H@#O6$$LN8F`__JF`_a)FTZZ*
F)h2"s)IpTrbhdUqJ?4Kr+l:H#&.aaBkV*jrb)5mroO.?r8[e9s5Eq7rnmY1rn[S/rS.;)rRq5'rR_&"
rmgqqrmCeorm:ShrltGds3(Gas2t>^rl5&Y`r3jT_u@LP_#D(I^&P_D])B/<\,Nf8Zi730YPt['X8T!t
VuEOmU]$kbT)P5[Rf/WQPlR$IOoLLANW+k9M#W2.K`?Z(JGjp#H?sg\GBNn+rc.sVrb_XM#\e!cB4YXa
@q#@Es'G\/"'Si1=T2A$<;obo:]=&g9E%N_8,bmV63BP@5sYE5!'L6Br\t$>2Dm?Kr\Fg60J>(2/Lr>$
r[@st-RL/drZ_Rj+WqmL*r[2Z)u^]T)#b<S'bqDs'E/UJ&J5Qc%hARJrXAc5rkJ9Eqn_m@rkn`RrPSZR
s2=fRs2P)Xqo8QSrQ+u[rQ5,^rlPMjbKJ,RcHa\Zqp,;jd/MGqdF6RmrmUeprm_/&e^i=%p"'/pq:5Pt
p=B/krR1brr6bo"dF-Fida6Chd/))dblZ,5c2Plgbf\,PrQ5#ZrQ"lUs2=oSrkSTOrkSWN^](qL]tD"i
r4;m<rj_s9s0_a1rNQO1YHG%1XT#:"WWB)trhoal!2TUh"JVT_TV)4TrLEnVrg3\PrfnFePEV/lOcYWa
NfB$VMi*@ILkgb?L4t;5K7\[RJ,XlqHiC/HY5GF$Y5YR'Y5PKuY5YR&XoPU'Y5b^*Xo#7*YHP+3YHP,.
Yl:j(YkbR&ZMLp'ZiRVBrjDp:\$rdC\,3T;\@K,Z[^c=E!k>bJr3la9[^Z4D#Iq1L\%&iR\,<]7[K!T1
Z2q5:riuF+riZI-Y-"h/riQ4%s/l4"!ii9$ri$($Wi;tqW<0#sVZ*FiV#I.fTELm[T:_eSTDk>_S"-"<
rgNkRrg<\OrfmVNPE_;qrK.AINfK3]NK&sYqMGE3LPL\@rIk<+KS02Ss+(-!rI#6(H[L*bH?jaZGBe7Q
G&qbIrGqpWrbqgS!,haO!,MRKrFl1Bri>prs/H!rri,dnrhoRhrhTUlrh]Xjs/#[i#c"/hU8+KXU8.OX
rh'7`q4@SVrg`kTrgNhS!LT;SQNNVAQ^IZ9r0I;G!L8lJPld/5PkpR@OU$r/OH5E`OH00sq2PK8Mu/M2
N;8D3M#N;1M#`>1M#`>1L'39dKnY<[LAQ])LAci+K`-N&Jbt&rJbOZmIL(FOI=-EjI=$DAHiSHkI/S<p
H?jd\H$Xf8G6rG:F`heJF`heJrcJ<`F)u@#ErU.VE;jbUE;FDOD#A)JC'JBcBPD-lB)ZHBk5OKAjS\';
iW.p;iVh^6hu)@1h>Z4.g\ok)g&K_'fDaA#ebmnqdK%\od/;5hc2PrebQ#]ab5TK]`rX0!rP\]Qrk\WM
rkABFs1A9ArODj9rjDd4rilI,riQ1#s/?(!WMf`ls.fOcrgs+Z!1NkRrfmJIrfR5Arf-o8s+p]/re1<'
s+(&s"aYK>G^"<0F8g1ZDuOVQCC"WgB4kde@q/sH@/jR4>6A&3=]kZ(s&Atpr_NMf!)*;_s%!&Vr^$WO
5lNqJ4?NR)r\t$>2Dm?Kr\Fg60J>(2/Lr>$r[@st-RL/drZ_Rj+WqmL*r[2Z)u^]T)#b<S'bqDs'E/UJ
&J5Qc%hARJrXAc5J,~>

%%EndBinary
grestore
np
15.6201 187.913 mo
46.1401 187.913 li
49.9902 187.773 55.0898 187.633 58.7998 183.803 cv
61.3198 181.243 62.4399 177.333 62.4399 173.743 cv
62.4399 171.383 61.9502 168.273 59.1499 165.483 cv
57.1899 163.463 55.3701 162.953 53.3501 162.383 cv
54.9502 161.583 56.21 161.003 57.54 159.633 cv
59.5 157.613 61.04 154.483 61.04 150.783 cv
61.04 147.583 59.9199 144.213 57.6802 142.053 cv
53.98 138.323 48.2402 138.113 45.1602 137.973 cv
15.6201 137.973 li
15.6201 187.913 li
cp
40.6699 148.653 mo
42.1099 148.723 45.5601 148.873 45.5601 152.993 cv
45.5601 157.183 41.8198 157.183 40.3101 157.183 cv
31.4502 157.183 li
31.4502 148.653 li
40.6699 148.653 li
cp
41.1001 167.863 mo
42.6099 167.933 46.8999 168.133 46.8999 172.593 cv
46.8999 173.813 46.4102 174.963 45.6299 175.703 cv
44.4102 176.993 42.8999 177.053 41.46 177.123 cv
31.3799 177.123 li
31.3799 167.863 li
41.1001 167.863 li
cp
3.0518e-05 3.0518e-05 3.0518e-05 3.0518e-05 cmyk
ef
67.5601 187.953 mo
109.35 187.953 li
109.35 177.093 li
83.4399 177.093 li
83.4399 166.953 li
105.66 166.953 li
105.66 156.093 li
83.4399 156.093 li
83.4399 148.963 li
107.22 148.963 li
107.22 138.083 li
67.5601 138.083 li
67.5601 187.953 li
cp
ef
111.37 178.463 mo
113.65 181.123 117.33 185.413 125.27 187.593 cv
129.17 188.683 133.1 189.023 136.77 189.023 cv
139.47 189.023 149.46 189.023 155.83 182.823 cv
158.12 180.573 160.34 177.033 160.34 171.843 cv
160.34 159.593 149.17 157.633 138.15 155.743 cv
133.93 154.973 131.44 154.343 131.44 151.963 cv
131.44 149.443 134.34 148.733 136.97 148.733 cv
139.47 148.733 143.2 149.163 146.09 150.563 cv
148.31 151.683 149.17 152.803 149.96 153.783 cv
159.99 145.633 li
158.2 143.843 156.33 141.913 152.54 140.123 cv
148.38 138.123 143.13 137.023 137.53 137.023 cv
128.67 137.023 120.24 139.853 116.98 147.013 cv
116.06 148.953 115.56 151.193 115.56 153.363 cv
115.56 163.793 124.56 166.593 129.17 167.783 cv
131.23 168.273 140.23 169.883 141.96 170.513 cv
144.66 171.423 144.66 173.243 144.66 173.593 cv
144.66 177.173 138.57 177.313 137.32 177.313 cv
134.97 177.313 132.48 176.893 130.45 176.183 cv
126.12 174.783 124.92 172.963 123.5 170.793 cv
111.37 178.463 li
cp
ef
162.87 150.173 mo
175.58 150.173 li
175.58 187.963 li
191.42 187.963 li
191.42 150.173 li
204.13 150.173 li
204.13 138.293 li
162.87 138.293 li
162.87 150.173 li
cp
ef
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
[/Gradient [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 14.0%%AI8_CreatorVersion: 14.0.0%%For: (Saenkhomor, Sompong) ()%%Title: (BSchoolLogo.eps)%%CreationDate: 3/23/11 11:31 AM%%Canvassize: 8640%AI9_DataStream%Gb"-6kuuiadP,ub_"V4@LY6>^8/OHE%tTg-+<^q/684eZB'm:G+5aJuWp2l%=d%lTTDcLe=n*/8Q!-=M<S,`+l9_3"IXAVTI!I-L%s1O^Wbe.BI%:@9tSsq5EFrjGKh+3AH'X3LiPZ-'?_hXu:p>+JEo;-ZZC#:e[h+G<0mW@(OQ+n7kq8:2SghGh&S#o`g?hn`CEVG\J%P]lG`qI?R/Dg.cl]tCK_2$E3a:&41]Fas&WI,""hj\<caY^&T9Sp-k\W"sk=nF"J*lg;E3!gP\4GG!i;(N6fBo_Y`ClTsF%-TZ@T%Ed5-uG&T%:'jY$"FSP13^>kXR",:@%%q!d+.mJN+g3e/3p,\2iA,GBB!q/g\rVG=54@-q:]'\Q[%*QasnAD[S<oR'Lq6ec:2$n-2%Xf;>G#oGe\?-u@WC=&UXpgG*_]-!]Qq:B-J?Yb24]>p7E]DINFioKWi@Bn>HSNZro5`9M_R`<(pS^Y&KZZH-:fRnVk#kHZDL[FtN%Mf?P*YI>F+,`P!6nBD;fC31Mc4lD$;lOC,'QM3cT5c01Rhp"o_fB1s1^G]F_[6ITN='S"KA!p/]mcd3tp[u2X:t:S!fFTY"igWr+%Q!b?$DWJeNT]^=Xn_s"LNVCZ1g$UuZ#;gU`]Z7abo0lINmu.4IQS@?(YPH%^%89h`%-l6Iio(c^=F7T^[%EHb^f,qBnA,L::TOH0%m`F@.#9JAAA\G#-S"hm+#(f.3\Ke]Gh41k/i7<(LrV!i"o!=mV0AX*US,#i#,jdtuq"Aq'Y.'LbkCDLBg"U#?=_p47/u2MN_s0)M%lm=hgQf@JlVlS(70H#M`)79,.=0pG+<N;=G`lif09;D)>\8%D'09&_ui3MKta1pP-")nt(*PaF0g?AJ:ERK6Fn&d]EA[jo.)dM:R%*AU&2?gbRLJ)ro&gFZQFpm/"PK*dFss(A]Y64^^K^G#f`\&8YB>67+[5HY_LS_O;%r1@5@V9s$@5'.^H^E2k')MkpW>@R>]@B@59%DqhD7mW60>$KS#1krmn2RV.+oHd1`\g(52f+(+Ge&P;0h]kp!KU+MHkqpfq.;OtL.FXhY`/$s4[0WLjcAL2!Ob:e`\h!R#e+$ld,%jlars?5h/7qtpO$jirKa*"\pVOY>VTY&YV)oeLnEn>Xj6#+r1"j[O\3S&Pq;W'f4>;VePR\[i"f[r0+(KTD/TC:.6Q<iM@"V4%o:%YNF@$RT2.ZH;1HkWmtjpl;t[!;miW;eYm5J>,>CO=1jDpEH2f#U0"^BX^!LUAZtHdc*EJd!*iJ[puiFp$K/sVO&N=B"&I=NDT.CG%-2@2-[Siq'hdras9(c9L]+3_@p72;eC4oe#5.^[C&ZYcg=8\E)X'krXnpe2Jal+&D?\3b%e1VX7k<MhJ^BP.lW9Aat*+6HbKgAb^%,oWckK6?,,L&kLi"$Tnk<%i$`>,`#3X73lUrs9L1YE],/2-n[Rh:+%4"d>^W=7iM!2peA,%,5_1cg[X&MGZ1pVIgaDBj.BD\u'D3%!/4FZDJ>DS)4$\s/.8O>bI'IU[n9]S!npb!>I/J,YYElXD;2=$gTu=?A=!>_<?#W:BT<QEW7/!lr9(nojM3`q%Zo;A\Jfj;f5OI9%Ec'EJ?.X-jn0nIMWpm!7R\tMZ;:"fLGT(IH^/omsT[9b80MihqiEJ>"nQk&H90h=%?SB6/9.%PFn5#sC5p$rJ#/eo+%=3led%Dhd%Y!eYX!4?TG*Jtg*Z#gp=kit@]>0[-eCOekpctEJ!SH+XGVp:Fg!><S+`#>>r"RN[L3Q,,2Y\!mT*5GS]0pT*2KI#;l*?UAAFm@>@%$2?bj<88C6%*.g]*f[d$A%#d\I(1K)A<a0Y")',,'-LZG^`XCHM[QV=$rd[TTni-Q0Yq_EnA.;K`/DD?_[lX/kYob-ZH=.q$u&^.%*;e7=LUSZ1)>n!ma5S21I<%Ag$t7m:Y%8]I4sg1Wo1t'iWq<:\:Rupdi,YPP6i7$M-X6Z+RQq.2[gYX4lLY*S7-n2J&HX5q&"j`[%LE@WAO:jbfI"74mqZh2\KW0PF*"_'A-(\87%nJH&Q[gU/0YQu9_oJM_:tqd[Jpd_"_2jud<\ilkQm*^lFnjJM"+h+eY%!J@0Rs04%RKtlQ?tSH>JI`3OHA07k0Drl[!Q[P`&M='_)G'1_?Nkm."'><4#LgfbD&BPbe`sjQK"U5GJcEm.Kg,"#$QNj_3_X3bpGBAIemQKu%@.'>$Xq/bB_M#>u;^V-+G;Z;de:>([^u?YJF:[$[!N*>6fET]-"!(5@\PWD';$&c;JNRp;Y#n5l*)_T+;^IlsL_;=;^`p__K^KbP%\P1*;#cWVTPAmH4m](rH;N=T8&rJ6W$Xa*V@H@kUjUN\?k)+^'$\,sS"=SL\2\B`6Rfb=d1LQI.53m_1pn=*6hunOC5W"u.0+\j6%qHOO&`&0i7o4ilWa0#\o"7ob7*l>;*BPgjtS@J[ILqS@SS`t6O[(8\Ph#L3u8@(,.Y%i0IlZ]5b;9.9[bCdCN<D0"M;;&RS%rAE<%Fjd0FY4g&7/kPkkZ:$RLUP]0X=bW>VOD\_:Gbc8F*)'Be#g,1V`B#Ed8uW4Sd0IeWJpaq5eernK%a:HYl+lJm#bqW@?6UFdk3rNQ%cG_SaLqhu\4-$de'GEI8R:otpJI-rmmY9D$"4RDC5_StV<*^'B2@(fH`.8Eb$krj/>sY/j+t4%t"W]k&&VU`dEVd`#/YG@gb``[-%-d4D%-0i[,HIUK$GjLZLquB8@&^irJ!6S/N+i<P*^c9ci-QVZKQmK;;"2`Fu.$Iqe6H(78>DR;b324&P./-<33.uB=:(FK<p'5"H%j[tr9h']QSi_;a&=tgj2r)G@Ud)PUcOLI4^5en>7b`NN\.FOVD7s49`mGpN(PW8r73^W6gahu1uB$r_12"HGpNYKs"KLR7W<+C$f%s!=D2-gAZ"aJ`e6Lm/++'E;d:W/RrK>l'\A_X,2(lu?2bH<^"`4umL##ZH;REoipt2LTH^Gd95)V^nkT:KgjADjOZ?nh:!B0Er6b%6s4ujkZ:4KY0(ZpY2OSq8lk1XN=W^g,==kd,f+\)I)D>OBW+I,"V3,[K's]8%^dGl/G`A,r@W-mW+:GI*<#EhG:E0d?MVaaPrMf!%9iT>V"4#j==T,Z0!m?WBqOg]a9:?OMF.E/3kdulj-N*>)$NE%c-s/b_7UeQIX*@^_\'iA-5k3rtX\\p2$+_&.n'&bV83FIDo!:sL%BiV^eWcP)g-IM.Aj'!e][2(a*ID0J#]eHLY)rSH]aaH$3QWW=_\tE>VEaL?\]7Q@bnQg4/Sp]e8ethnP9'=_LkHt_q728LT3m;"Q%oRI6ocmJeC,F>PA3jOWLC^qf*%Z8^<"_rZ.F[;GlTN'*Bf:^"lmQW^X-FnF4`<_jC<rq?[L2d>;&[<b0i8uHW:ng2XL-=f9`@sQ@%=^ZY<TP$El`_+c:(hZi&dcqt-FO4=O`hGO*VAsiQ@+^a\33.Y1=3mRi#F5U&)f.f*$#"AK^*s>@iLmc$[4I>KL1Z0RL2%b[+ES!E%1R'\k1UJsV1XoKILjb;57KGs\(-unr%#b`ANkgGo@L4Aa(J#0.'JILZ$=sPp+Dhs<(k!6T(l]At(nCf+LfQ3ENP&18Q^K(U0q'hs%0tK*^&a_RN)#Y9T"Uu=a)''S@CH3Rc,H&Aq>=_X#+aKTXN38,F2&WkY,^gPa)3+S7OdQfM8Bm"9aNY"98C!%:aNb&eU^,m7g,&"u%3FW!.!fRFX1,rF#XM@\D0Jo'9YpN-fXr+TP1)_%U&8M\mLq/D]?B&Bt<6qfL"@o9(O_L!1DKD%'KN;0Kf&u6c">^`:P,eZ32%$?u%*8S1o\VM_='NGjgG<#[dMCXuP)9SH`5`?\\#7E'iWp#s.8/ma])i-gO,=g2(A$hsjaiIIOVl@P4L30KdcnC<f0_uZWL*h1OJs$VA%-IS)Te7XT]&Ril4aXSZV9p1l13%Uf@M/BOX$+YP;jt<RDa.g;"r$"=1On!.C:kp$-FDaC/k>Qi6%k^8^r@[oEc]@,!CQieq[E1Ds%7]c3!r8YHij1PEP]`7$)s5Uclj1PEP]`1o=Q4!Y3hZ%TPs)HoqESg_8hZ%TP-g\M#esP=+>/C4opH<*rFPQl2e-CAE#PYb&rbaU*%\^gYFp:jqt,/9G5^T'2A2VqWND[ZBkUW.@2^RSLkH[L9Z2+8*/IlmkY/fO5pBl7m!!8G&5!L>Fs0FntL_o3\pp^NmGjfSGhrp#u=%^B`uABoZrCc`OJ^cgPrN<TlLAV*P/`JftWBdn-=bm.HgS@H6E,F(_8Y%(*;"irA*9EZ@jB7ccEkhu)`MQJZ#(DNrbh:<Mn8^*+m)%<>`.RQ/HkS^0*$8AVhCXK42:Q!!]F.9HW]%^aO$!C[;hkF,STH59((H7=Y]0o=g*hO(tHAJ8)SEY(;f,lL>?ueEHhTXtL7qNnX6P%fUM@$oDa8W]tj$#7^(Eh]RB*']*g;YTP1=RC&EHZ`<>I-9&9GlCu'<(0<C+p?ekn0aLh5tq\qIAj5'NT0AW,4)P-;CO:>i!qo_@:%k[0>#Rja3aDF-@B0sY9$-f*/"s&/3rZsT7>&CYCO4Z2]7?q-AcrpPm5p6"proF,43ju@/MNbAuVa/>5p&GaAbKV"'X9]LV=gpWYS%(k3Z.s#3[E[D+ImFY*Ark%Gakh-7A?IfAe.ZMtmdY&t[sZD#Qr.@-5>s5W\PqXQkL/,t*dV;7dDqB)eus3&lagNpO0h_'gMa3sOZ%Vp.[]H(;X<Nt9"2bUcof^FOgDa!o_p#5,1?qqeM-A)[[l]0fc,FE\jurm!9h^]3%UTm%+X(s0NKacc\t83hWgg[156gpVQ;"<97J%p/iMdQ;R<>o05M!PGC9U^NJt5oR;Ys]#Fugo\])RF0jK.#6SYpIe[FHA*0@Q*3sOM;Kt36]"!@Nmp@/pXGFh=GO8Fd5r?FOc].?k%"Oq*JFsE3GqqC27R?![/YDrF+fr*89^@]ulk>*&Q?F07uJ!uK\9=oZP[IMu;jL^K!D_2<BKh7(H)P,`%]@"18hr,M1A/02.?iO!g%1`I_XlsJ#OBeqF!CSBk_,$SKOf7\t;[O$E,*4eCrC%NS]IP3rN+.$dY)r_mXX@q5\&Lse;?N+\]cfE.fgcCTX[(N!FQ./lsV!E:l%h#(ZkNA!)=Jk^9g;[Yh'[-sU?DnZ&NHeSXFe<\emHZ7X(rfZms!p#!cMm+RJH\n*EB`i*g2RA_:Lq&,;L&,feepE+2VYA#*C@63_%0AY4a9X_RJTa-YQ^dA1J"+(WQGp#P?_$qqG#H*@@ERJQES"7<_q+o7bp[Y`ha'Rg"Z1ZcH43YlI<X'H+/LL:G`ll8(j.Vl*Btju^%c<hSMmiUGY(%bnXrVYdI%YTEF'QLPNGHJZ.UFu615mV%.[u+?d@J0GodVf#ceIkl0DK`V<'&;ke3A(80edUorH@0GhHSF$"A>ggC%>*#k;3cm=\%B+W(g4b4-'V)+_FGN(\rbC<_!9(DH<o`9oWj3k1]F*`/s(Z^`1!\Ou2Lo\Kdsc%(QNh^-Y2-X,hY2r[r9@.k(V6`L%,d!W-jc:XGX1^C]+=E4qX(Q1J>#M=q'"J**,4N)\fG:O&gUBW0=;2ug@2gdd*H&5f;16tr%N#mlj26E4\keBj[m73rL"*8JRXhGV%'?AJAeitl"3S*?i-U[MtnV#?VpN!S!U<m6D(14q@8*i]&&gp*T4)p_`&PH1?hb-%=ao(0,c%L97;%P$^Q7LFR\rebEqfo2o'<]2"%go3?n>WX]%-APYeZ\_]m9f,k$YgR""O^:Dn1eL/VLSR([kQ#UTDg&sP82<XV)N4`Pk_qK/Kp.YG?T*(*WjlNW1*_\l*u8)IWPRd:%+:@,k0?eubObGWU-emHunJPpPVoj;TXI0%9]EKj<#eA8gc_#VG5.P"@s(/"P4K.DMe,K0q')l?f;_T;^O2?nd/M!aL%0EY'_[d?o%YPrFC<P2s%d``@[Aq87Da*@EqlH\tElTJ^[oocjaYP4G8B4R3%kal0#[G^@dVtc'di%)7Oo?:7@fB/rbm9Ag$4$cie[>jgabl<sV%ZG5TDQMjn^kKe%P2lPB48?l8#ESp+H5.i`K%EMXGEm+F=Zl5p:_SW;6)Vs/ghK.^7]dPD[M+m'AdW_f'...mJ)Ei2U;S%`3V/j,c%f0#ppmG&N4*>D&(!R4!JT--:H[6+DDZU[>2dUR#t0grr\TnfbiC[kKGEdoD0mIfH6W<`tg\4,*5%m@]T:dE8VcN)(5O$-)7U1))_%4Vi`#NTrk;1F@8c9rLQ93!L)_.(_hN'IBC4[aF?:+I<E:b*r&YRhY[[Ts,4C)9OEq,"$'E9K7mJl(+I*?=tZ;H_$k3dd%=<eR$:Q%q!]-X\kV[pb'9=0MgrJ5MYF7)cHl2Wg15[:"V,8I,Y0kb/\4B4R-<bH5Z,MKkUZJtf4$*WON<TA/,>8qF?qo>\O(aR8ic$_-.b\B%95)?2EE&ZA_R\uUP?TBoKXltac[Vk7bFi7TpT)t=5re)-6)GB_iMrOAR\$HI'g^jUM5A^eRX$TY5Q]d)Du\*a4-+l"Dc7r%4<Kq?%.7uWHdZRRO1GnRt&W)2iN0Dq5$hZ)PlNMHHZ9%54$s#AbjtA"t&RVPbf4[$1>m&9HW%V38[<;4f$A26E]9dCR8terIZ),GDj!@P=%pXfp'6df_2QK\[3)V8OI^d9<'/^o-['r*PE"]qc#=0n/Ag28"[nOY>'dX5^2@H'[P$3o?[HC:(Z!k0>a*)Cen\%`jUbtbU7,+i20%F:)QB)eW-$=H!Hr@RVYHB;mYrrHaf>@ShVnb0[-'rS'#7aN3E+':9*l\!O^#!eEs&?=(Po6o]cs&d=O;NY8*IC])^F"JP_fg1lqj%nY>jW^2pM;34p[SgLH^Ad3BJ%EiTII+m=uRc76H<Sm?3mGd,bq%Jtpm[/'N@<Ei`i>[#kZeMH`^@=@p\B$)&7jY+48hVA%Y.p%5s%gJ9meVsB?-:[N0ihDLVM:Rtik$g,b2eB7(3Bs'.t[.3csC>nBW5ILFT&T7RB=e&ZA><A<X5.mghX_<KE[^poJ:X.WmQ%b9"fB=8B%kGh>/k4+KAZg=*Oo@8-cqI/JU^$U8'[JSmb[WBp!j9hI'`qjOdq=SE>CZ"SuGWR"]'^P.if&p6"qQ!Zq>/0u7?SAP=l&-k^KstO:%IU&nS/=o1T#>W]dfmntBJNjMZlRR)(m<%3/5=$O;]@s9-`eG)tXR"D`T8i=,Vg$kn4.TP=%]\oDe%-WoDXVFV@sdJ]%@lW[I4DCC%]ktsioDU[RDR\QgbA+Q7lcuuWl]:RqDS+fn[GC;jfLEX%*Za;KO_058S]C]r6@>OMVWKsG^!MUSoL-I&VN&"&T[@!fBXU"3I(5?d%W;UMG0m?cYDq)A2d-B?E@;M^fom8&fQuu1@NoJ'YeN\J]-8b#3'McqGV5-S1B\P=Mc\"\q/5!8'.pI),\&F8-"CM1H35!Y&\[_ul%c1ep&4Z*SZGZtR)oFa.ZS$@0jbqAWe[<Q8b+'+]#;6/Nn9&Dk_'-">`a4%_pd=@E`Z]39)GD4?LNRmQgQT<*FD7!ODAgTCH!uPf\%?+/e6qI+]a46O?D`&67oqk4fAju9KX`AO[GrRs`f.'sValKm3ecMRB+XikWdrS,V3lq"&?h=lW$e^%lJNTLT%p@?s8_H<@s\`Uf\%EPb8E<]f-hP?D^DYn+Mil\h8#f$kj"lFuBfdBOb&j\+IojiVtH;<R<(kqd+^G5YANNV)P&G&UHfiu6/W]$i`j]'e%k7u*Om2L;mc%Gt`$rlfk9E8ndj35s&:dG,\@"Ym>sU=0D;dS'/Lt7aGs1h^:=.FM5"^Nb]=T^NEQ(50mMZYm?pbR!Cc?\@qWG)uY/W[hB]Dhd5,V%;5:ZgbZOVIc`cJ36DL"XT>,mO;2T5_bNA2$>b`F*Z.YV9;X[6[K!-cng[V1qpdU=)++@Qr5:jf4qQ3is8<'?mko]6_ajReZUdj\(%c,W$jiYt&;>3K4V\s5g]cjDX7qn:u7+P>G:qJrAPYXTS\^$Y<bg$HA"\[&HeV7oNB4S+$\qqL]Obf]g,l^d6AIk72:nj]8L`JCC:%V]?i3e>P+20u"B>[+OV,m*/q5.m]rW$5X6Y`Mr/@V[e](Fo+ScFk^PgDU-k",Nt[JeW8lqUYgB5HQi#6S1hS5=l4j4T\7kE;0]7I%\-MJO6_j=`BVV-=blutfg;dZIUc[c$_Rg?.W4@2&E'TCl.r;:C='b^sl3&'Vq@J&8^RMt$IGBNGNBZU^.G__.0,;\AnTW.taQ1P9%KBp5'qeqIn&)-IE;D7"sgkO\LT$5./"U`bGV[DP=.c-/K0KZ`sNa&.+nU;S79^hn*'rihQmRtS`rjH<,mRld5oQm+Cn^WVKHM?7F%f(#*\a+V(<p\VRL1Yqi<qqAMaiF$BAIS73>g`10J]ZhbXh>_c+k'gWn^$?\eeV,>-Q=DUlTZp)4Y4UUohOQU.C)[J'5KnV[I/'u^%\LTCX:gX&TgNb=t4MA(K;fP!,a59$2eUObUQj`G.O%qtcs6eanQ4iUmr-gQ9X%'t^k<J@!Vkt8[p[['qF4s`)cc0AZgZ"LZmf',&%rd5LP0]m95_H<F:G3_^:CL/"2Hdg$[pnrUVhgWiKhOT\?>PRdZrq$';d:V1i:1sOfA$03WI@QqMqo/R37X=b'A,.#2p'IEfl/oN<%okgiMHhZpJgAGF=_pf4.gP7Mn^V6q^ojtB?4MC9rnDRAnI'4fk2Z0-!h^#nBSKB3ol'f/&Y*nQX9J,\If;Fq8VdH<e5CWpQo&fr#%eGRk6)u_las0FJgZ@;tbd)D3l*nse85='55[]$m4jjc`eAIdMCM`5["a@lC*5rLg2qRD!d!#FF5%G[N)Yh\S=)ft<m/)8gGD6#.2%A&^q,^\>sBS_MiH-WTW9butM,ac0'I^TSn@Wn#;<EC-GG%!Y>sk51X@fheH1hbtHLT!FP!h;7R)b!o+4/sKt]SXD^fgU1^:]+mg)%2mlNKCfX!na/r::dJJ.VAqELGQ1qEPUS-9GJs"eoiu>BY09[?GY!6Tn=W)+CI#!AE_4(SbiAR[_7Ui-+NGiTJM.7ii,dC4R8'[=F%],WZMXGcRMGMbifW\9",6-[k3:5G[Sqb6+3B:=snT29S)G^V&/\^&sS;aHN]3+aTkJ*_#AVCk!E4MOj5GE3U8_ljF$J%L@NJQY"n%[uX;ca+qk9CK"0K2\[?#^X?:L<ThiQ3tRHo<u'T\`b?;O]%5__S\P1=N>b+Sjjd__C&u(]A-7aP0GffD5_#r:qI98E*=J::MEpNF%Ct&g7(J)Q]hWBA?V=;U=5GAE*Y)HXOQaJug:nTIPL6/1HHZgr1:gMeb20T`;.X9i75Cq"%W4Cb#WBH\'adq]d3Ygo-lJp+B14:m)%Z?Qi/'!M]W#%)2OFRV1*l1B+uqW'BkgXPs.il7<8W$A+A`^MbFJcYhoc-N!l#LRJcORikV6c`d9,D=pf?VEsjG5?'J]tda)6<6]i%T9G[+=3/2F!OB))F+5gJE`TtW&n<D([IqQ+gs/``:W!!D^r^(rrjJ;VpKSWB,,47@q'@M:C=e_P[/i;aYis1D##aK.9s9!2DTaNR%GQ_pQ^Z.ddm&[9o+88\16aD+X^TQ(ZCEMtZkX"[XM='A,\WAd-F8#S3_,*K,CGCS/l^>SfI`LSI;Fe*+j5rH@Q-*U1;(]GU;8nI@%bN7?[RM[`O":8#=XqjA;7S^i4T52]8ik)FsY**L/qt^hs7E1N]6d3laq6*@nqP.SiAVH>7;C\^]Y;0&m?PUer:^hO-en@S:?"<`h%:PO.]53n#g)g,:3JX4KeAbO)WV8'sT`N;-@7o$FU_?@h2/d3\[*Q&hUksIUr2cbF9Qe!D[,#2JAPL),GO&>oAn&5fX\NCsDKgeQG%>"dRonm3OdJZ$gUWNnF_kh/FPlt!8jTU5r:N$2N?h[W:Z74mU.6dk_NHQ1gfMP'dmq:hljAE!;a#Bn4]:=5=mIkmC5d,(soUb6NS%\Y#.=M'a5ZZ8Z]CWA]6^JqHb.m.BU7<FlM4*iH=@\OJ0a?b&MSap.Y^C&JC@M,RtW4?r`d"06;@(^j!j0ejH0BL?9g8%(CP)<He"%Q*B;[K2\U)]QG4dQ/__oTAIQfae9QYnT*u)-dfTP(&A@*G["T(lA:QV.j&qnDf=b9+WP(%RbLW[hI[qH%JRera%gfe%rfF'b<G9/%T0-`q,:&4ZUDjJmV"p1)9PH+cUa+)]MXAP/.?LAN;;6+:S.(k[U*INF#"r\S<^i9,DQMfEEjhbm6en@u,X9jnOo//fD9l:1__mMe%eC\=_]\>f0O+[f@DV0&?QZ@eR3]3W3O?BC6\_k"4&caW"GJj:SM<!>qqfnKgnm"Y[=*oM#O=?b5ZK0P<TCK&\9:lVk_1]I#_@92R%UrPN[I.H1,g/!.n1'<$g##hb[b<!TUh&bu1+gUGhOS,W2N$%B!a95!nVXM30n@AipQhI-e4=NU[(/"WhGrE>pM=u:'KZ'Bd_a)$\%V`7%7Ft^)W"Xag&-@mZ/Z\CD8o#E8S]frhd6?qO9:MY-G^>oV-0o;t6g3_!SUWX+&d[@H@+"JjN'%'%JgiS:-JL&3M!'<dBRP6*>%E\eDD#b08P2-C<Vdecm?3fNuA+bMMoBs@;NAjkD\H]7VFGti%8,ojeXl[DqFRUKQ>-q1Z>E<>`C5H4fUi:F@;;fnA.=,n2Y2E/qi%Aqg?JdQ)_?U@^nf!3c:H8jqQrL7%U@@BNtf-.oMZ*HsJ+,]-[rO+gTi_Yd;Vrs"GIi[fN7V9c_,-\DsOH[PsJmjjMTpT9<bNE9P"%X'+Qmj0A6$.orO,/!DJ/a0sjEjAhpXMTSlKp]f=`FsMk,9s>s>oo)$9WKuj`b[-FR_pgK<hGa@NR**8rKL739d/"l!jKk2O98TlE%XYA*_E^\lF*-f<6-8#'>YONnV&Jq&pU/E^1F+lUR>Y;BB(l<E"]L5DMOMKY=J4/]e79?Or>OXA4,qo*#?(#[9#qIgO\!/B#,+MAg%487(],h`NFs*T'J()OTUHH):bkEB%qV0["lQd3%HB((,4fI*"&ffBTTm(J_K6&1a9j)#KE>Onr@JHNQi(tmE(FlPiD4]`Gl'-6?(%9Cb?n3$BdsnAC)cW,*:o963<pb[/!n^\]08R=EN\Z#YQ'%2@T<Y`ql!%'1gka:6Z=(lP>*ln&cJ9<9Gl^[aRmT&c<'BTgE=-;\8@%7fCbWiA-I"KXKd*EU<Q6P@"84>r\FrLE>"H"X`?`?u617AT8e*F^`@tJBGll\Q")Gc.VWpfU(Pa>-V8tb;f3DW"uNDa3nF(ip?QP%>&o=JojlL*l+0\^R)\cl0oe/NkX+&;^)Z?'hFc\^Q]\^$iTMrSFCCgme]h%/2N1%.!;c@Od2`[iP%J9O_ucK`!>]5N9392FW%?DN%b[B[%<VE)a6E7*rA*g%RQ'+gE-@/&r)<Z;!l7#C1N/r+R^*H8F_;"4K?&G8MN0?%kYD?X;`i,`W7(&6r:JOk_\(q`G/RdgGZG1l,%h+OAnapaIA4Rr!];n?n3Fj!tmWqmB//IGd<>.qbpHC:1G+NC_*PET#O_N[G`%W/sTXXq<,W"`<32W"R+i!rc4'<<!3Pnk-1R9WW7%o,(;30X+:11$tt/AsklSFf1OTrBA-C\:^aqDri;uK.^5m9Fb?S#$kTUd"j](ko"TeHQ>>+/j4h>/R*1]*4kbN\o>+9kW*bL)0EF+%A9-n^1[$%9Jg9I*V.\0:$BrT*9@'9+h&R0MTh@%/fhW:&ThE_);kn<ljNs`9cuFDKE"6/u6ZR4%fk[+cS[o%i3>6)lcVRn>MY*LQ%lO;LW]m`&8+^[jHqSq;nHh)'iNmR-T?GP%30RLp*fD&,'P'<?(Kr=o$S,SsjM]%_pQ8/S?_J=NJPqA%[5-eQ$B?k'1?ZFG?ac,l5%@a<ma-"fCO#_SsqWBXr(USC1'c"3(rQcmOY%diX$/qIbnXWVHJ-Z'(`?CT0m*8<OnRnPZocr*S^\a*j8Z<MQ$jD]Z9TjPg!(lMq6%pgoqnQS^DLD5=9V@;-%(8QjYF?.4@B#Z`7X)498&ZEis8/FZfOQbk72onZBbPPLSCAi6G=d^M1a:2_cW%`:J^ee=6@LIs;_H$ian%(^Ks3oshDG`?'qlc3=L`QhnTFpY0Zo7&-kd4aG/+rGbtJZr\D*&+$<_DGCV(a-ZejK$=,Ym^EjR(or"dJtQ+aC>)-qF"a4[.Ah2l%"<KUh]E_c+/ee3]fg0uCLWJM&8Uo@-bRf&I"*7q7R3@g4b:>Z$R1*^3.j)m$.Do+#egb0=m!=361).`kQU6EJ,aW2>@OrMoFZY!j%SU)72LcmYj"7`TO0S,?^ou+@O9"nP0=sR)Z#b8iWa%nbn)DJdMS$O!&Qs:D>Y:m8Pip7u(,Jkj9:;7aG$;A?poib>`25#$m:=N7R%&Ll5E16V"q,cA-]T)4/fOhAUL@J`H'..:.QKT7n4ALIGA-h;+%g$D8i>PGQC[Nfu$A]:s6U"!<hOm2Hm9\?)c<>(TqC4]]Le4IrA%MPIsXp)%nNO>UhtmBK&Ap#`SUfCUo3\_M^1A]7Si'dq3,,/Z#H$Ok1:9C,P%*uWP\L5O'JFNGLtMkt";AW+V<g7=fY.5%Gid<BeN%l?h>X7)kbi?O-@J=X#VjqYp-^]@?O06tG?shZ1.EH#K4/9_b[iI=H/4TuBE1K&%I#e'Ni1aM_TsqL:uj+KX"k0-bVHr4HG^1'qrL%7*M<pp)0'8!&mY":<p:@@dC-Ld<t?AeDPc8=cDIorCQ&qDP$1Y3sMuM)Cu6)5FJ/S%4uJ\Cfhop8OH]h(k.ZR7)-D&BA0pN0RYLX%FWi2<E)9lsE-iI4GGsqBh630:<u:)1e4ei;)al*b0)6en.OSl`WWt-%bXJtB")L/L7i#$F\Uj5DS4#O\gCH(_/3\5@gaMV5)a5>r%IM_XPoAR^CTpdt`DSQb4$0B'e9HJNb%a'QbI3WFbrkMD&iM*rX`:DeroAO084,T:t3$0cj>66.5&#[cCh9n7@I(1##/7DZd,:TB?%cpdNElKJ_AGu%u3'uS/%AX5KAICgaoS,;C/Vq7[Tb.&+*?p/3cK/9_#@Qb=dH'mGZH]75-2ohN?ddK-8msuQ3dEYYm@aY/"I.!n-%_jI8_9OURi`!K.)H2:<aVUn3kU5jT2nI9eAg#qFaP9@mYVd\uhEeJP_Lc#\;T"m1qI%A@5J>o-IBpd.lV0^.KL2&:o$-.GF%BCk%%4[&d]>)D"8Z*NjLAd5pX9s(GaD2gNlV+;"&@096g1l#8V8Gt<#N7@/X'?j"$asNI;HMqIX)6*J>4c,-I`q851H7df*;PB\ejJJ(n%QKbLq"+(^I4q4!DRf,+jW_4>HYE(#$b"GZgh.21We6/8Jm[JrHo)f8\/[!&ki=b8)6rW'k*ZMVa-ToH^;W3f&1>,X:Z/V(;;rNK&%.n<<fMnF]+VXkm$Ko:p?9KX%B.6a'F56LkP72//HT:D)>']'reg`,4Ip=SKF?DrSbB-M_nrpIT2!G&8_r$(\dCm`sppa*hq/M;^_%d4<2d9M7>o>8K!:Y:iAC[ZVfE3RXa_*2,bjA(1UA!.ACU`l56i0`C3c9_[`#:Ug2.rqUAG[9#PjFhY':XFI66l+'-W]Xmj63n)kG%X)9P\I9LRh=E<?Op'HtRX4/f*lhAES`cRL!KG<iSilRg&P22-VeQaY!fV+QuOmG!tq=6o_?\MCn2V'?ZQV#;:(Pu:-GVYn_P$pl$%C*tk'bi#2Khia/Y#%ZB"R`UQKZ.b%oih>':8\%q2i=*=hZJ14Q.#is[_!%_2fk<4q%1gNr-"Y_3$Rls:e+H0bYu.X;s5>5s;*9oC%?l`6s,UL(YUa<Xt3m!A!J"6<Q1tm-p?fCeMY`[H!BaT0Ip-0o_$?E4K40OF=3m1i3+F`k0m+rN0=#6*t.pA_gRkN0Pg5j4\;MH*V%f%Rf@TK6N*QWDTI%D8LI(kl-bgN,SubAGa\"gltkiAI?EL(-o2;L?t>Dq,]fd'*(CM>-DJ9(#Yi^ja`(I3-g`S_-MSETbE^^/JUE%PN7IW_Y(V7CufERG-7JIG`R)o?XN(AEWc%.:$</!`:5.Dqj)6*m_CFa4DQ&qdPG^9%)#;No^h+Kc^4?upZ9G4GKk:2h4R=-nC_oY%`aOVFVMk$JJgfEMZK^@hl/LS21JTi6>YHh`^5SIS(RIcR7cr_BbLhY5m75I!MkDAb><SZr]""aE^*.%NCq;U(5+>"_-CZW*SOV"l%'?[21bGC,uN(b@`/hYE^IP9J%ZK^@Xm=G!mWGK/1pKUEHRk?=[0"cCM'%qAH8t2bDd;6D(/k+Z64FT1o*;so3U!1soflV6+Mqnh"%<]465<<LP]*[."*fs[D]2Vh1H)`aCj^FFVtg8)(>7`F#!flV3T<c6pMFE&$lDY6E(l/F269g"mtDRH9Y&,b)5FE+j5;=AZ*Cq@.K%Z1,oW,dQ[oEp9=pAc-AU3+R\;bF1s[?%u%U$"VN(jjKuqa#C^7\2dp`O96=[?gM3OM30MYCat&2R'SfY,sGn+(<j@WoQbS!>tVLW%7QR_*e[ihVVh$5ML6tqL.@MWuS&)>M`WF[sOJ%]&oc2kgr[qap"dr,P)iC9I]#8c9lt4>:c\eX1N>-(>-3[2iXKsjMaVFN*@b.-C%pVJC'At*p8A5:N]aTpW2Og>gQb[(!,=4p:<iK(NBQ8!Y'eq^RQF-i'3PqA+NdlYCppF#Qbm`$6nhA]j=guOb0a4t6_...OogeVBI%1$,(?/@eB<Zt&Mlmb9GmJ.n\Ek2uKf9\c"jHI(.-rl"@Y2V1-)8q%en71"^W2Eu@;cg-%W]bnPWEpm[h,2Ie0$3p+b52X[NJOI)#%H[g+)1(9@*EFd<d6c:qtfgN9@)#B/2Eg@BI84N=9':h65._>D!6RAl/@(KN]KEDs`]:mLs[i=UKP.RF51@Bl8Yd+#b3U>`FOSQC?%p/21HP5%*->[b-g7T4RU08\s3G6Uqs&_W_>.6Mif(KE@QYr:\Hp1Rp;Hpt:qF7.qfVebP`D[")%._VN,]O[KR.l/sJ$s.OP+tA($%(F,m&E8GAf&V8Ne6?EGi^nQT@%Ih:LpJ@ImA\+e0PW,i\$rL)$/7\9m4#)k+R(;+&b&l"Wi6979MrU6>Q2\6,O0i(boaI25R;e0d%h^aRS*EDa%`$#ZNM+j$'7"ujdGgZ4glq:lVq_Ko^-0$g%l\)km^G>eI]9/t!h[+M%T3FJ&$$RiL31Y%JM9O$*dY(B<)_c[qT9M9s%]VM>ZmY2c_m&Rhsnrg9u1cb17G6?-;?1*b^%6i`'lW_VRPKH9+]D-Q/AFDC&@VoWOAj@tb/ph&EA,8)AA<=V6%:q^u+L1Y::L&)?%Yj],3oaDeaML.hre2)Zo>-(//F@u;H#1o(:?9!(CNUfic`&+>E6fketbim[JWp#LtQ'c910m6ep3VP-$`A/Sm+@?dj9deq9KsfRK%1oA!GY\\3h6C1*\rF5-<=N[_Xa:tMsP/MIkM>6M6qj!Q4R5KgmSgiGJ\,`:rP6LPSL*=`2/S7^eb%)>iMCT:V&6l+J#O%>0L>c^<%@7^8JL<X]i?i3ND;a]n5le*62'/RK0\4'P%C`(0dB/GVc5fTg5K9N(_0R`gW"thO(Sh2r$EK@S7;L+\9Sd.oqbLAIE7C&N6Ea47M%X0'rk<oVgHBkGU^VmE?==Gkt5:%pDEW.(jUI]@k!Fgan(cDS?J\Th2TPZRU!)s>nT:csG4\9g?L'KLs9r3^Y^QOfE5?ujt$b!C4n%f1o:G$K]/W]tZX(9#@oa/J^ND[8iV7:=r1arTd51moL/Ae`rdL+6+9a("bN_C6hu/d3!)Cgo^?DUZ!c/:3UQSX2HWb#MiN!^CK*J%jShm"-`3b`hL=[n8U,b?6L]d)ccVYsOYj_ll$D<N?DV644WC(3Cc(mirTR6iU[J\]^[@:(D8nF_c@,;E5$fKY=K<HJD'q1*m=Ys&%N&LNp)HAWb$r'IQ!W'd!0\?0"+(+Ga@QD0S>-r^+OJt]biImKVC@]/s0fm:lXhV:?c@/BF'5tj(]<lF=9C2%dO]0K\[Bo9C9@M-e%eaU/%OWd&SS<ELlCR8--6qXA3g'X%.fS"9]6<gLnWeh[q_D0[OOee2OkSCN6Ul.=&jf1AseuFr;YiqQ(8'adHZpU&GK?_>1m0Icn%]!nRuba-L>>mdoMb^@Nko^'2s.%Zrp$CDe\*ceujm*jZtrTW2Y)\uMoG2M<Pjg&o5Apbq,2KAE'Q?E!Y,mI$2NLS!nj(_-`$"Y?0%Y>&Di#DRCbIXLL/D$'0C"Id@_=V(=7lObAbdCl<_8\B]lEr`Q/M[f;^Yd3=q>$9ipO\I(07Q[%rgR(/q+*1HhF)/E_b"'_g%aGn"%Xs`Y*A#fo=Nirg6lS/-G=)fBF_H>Ns1A#17cj#*h_/EV8g*;HGq#,AnEZ?]obj,^%1F7)dg%X]W%Kbo*SRXOuGRHrM7@3lB?foq/%M=3IG@#_3mlJ&3n7OheJhT)L67c&3OS-h4krBbcFF6fH"-H6IdM\3We<b8<LqA%;Y9rVseiP39<CuG+Qf`u4b&nC&L0kM_4esA#E%D]K&RAX"a]X>tgY*ShqcLh1Ng`EP3_WYh+HS1+[SWBY\E@$H+33Io6^eIf(edrRMFf#:,&!fX?UU5.F:%lT82j.*'g0K*Y]@#-'W%3IlN<<f-#Wk<qJP7iif]0Y'j8=@m&:P4b_k<"\G1kX50#3g":?6i"TsAc8M:jbo$H9`@l&_'cN_i_Vi$,L9'g:Pjktd7WD;-fBu'%-sp3nDXrSRV4N`1Ys\>mSmOLtTmWQ4!d<kE\k_J=nTh"]i.P&--Lkt%4P+KqR9UDP2q3*8qLs\?9l(_V[r(KBId'_'QlN/hcLm*7%A`Qh*;;Vft4kD>M.[9.R%sb<b!epEKIS'!_)YRFN9Un6=\UNd)6^5[B=QfNlaQ/f*\UH)n.k-u=oui`cqP=_)s8:$ecLjgpeSh5s%5[r%39-7".%b9Oaont+pqHM3737fg3a'$9kTYoF(RXUKgI&'kmA"DqPY39PaB*.8mV4[$3j;Y$1ch0qTFVApa%t1TfgodX7<55]a%j-r<ZHhMOZdVC#k:Z,KmoE>t@8,$-KqP>Rb`akm*FKT!KJr2P<060+kaQNEmDhCtaob74e7SZb<kPD"_ZWonBNI%a7loL+_+deTQ%rjdLB)m7'rWM?*O(WtY#44UP'4]`l"l^*VsE?a/IkPD%#[<(Ei8Y#+5^,eBpH$j,7`?TaOhtVI-nYc3mT?RstY$_#<EUn#%iQh*h%\)^];qtT@NV4[$3RB3b]q_N8Hadh[`^>9jc754#;Id*d,NH$#s&=YN)cJol@ANKB]^PSK$2pdo:nFhV9F8^hRMD$/^`]MeU0A.Ok%Wh7KP)Y72ua^26MqMgZ'2S>HAaC@T/l^)5G>lOhSIj4(P9d9%Kn@=#$nm9@"f2't\nSIjFcLi,ocW/3"I\S:.b>\@+k9I%.8jhc(%V4Hn<ns6VUcLjhlA)%LVdpaPnl^,?5W@t,*ijjM0l#G8sN+L=\>+<hr/&sj*D`GLPe8tRTJue?>^N"E-Wos5TF$qWjOE]'^Id)T\%>Y,q,>efoafK^[BGHP<LWI?SqfLY3%V&;SCL7,ujIT^NTn]pe8;_i[!?YXcO&Eind.u+..S=.^r932VY;So9Q@\7s+YYr'VoKrS<%O2u[EbZXs[Q0E]CZqIHeM:4J5j*`n(0d=Z>jjW_ac+D?0T79m/?6kp"JKU1(+B"jp2:rr*6%g+a;tF&uDc80eF,*3U^n2?q%_A3k%d4J'E5'/ukXq]IDR9pHkP3jfCJ*jDIh\pPt:![2%]UJd[4gj$KQn$W^=/R^d4);08?Y6<lVjF`B\`U*IQ!D-c48<mW52@;CCd%_V%qR,3CoDPHMSNiamo[j&6B>6Vo[a)?`&)TS.CbO#igf0RTIUCgDO.T46hZ%t/qRY5C'[Gk(3ZW9bC:`5;Y84Lu?gefF*o)0Mns9jL%2u_#b+5kp-]Mpt`c*`b7`GaLd;b$Sm[IjIDg=#9?k(Zq:oVJ^-ca8b?mGjsKS^-9X9'>Tn`a!_*q</S!5/f<02u_<mf"Ih/,fpas%]kOn#mS0VVYW%3@o!fPfO>pMo^N?7*X+%1;%dNAVot0,f89U$O>ku][4L//%FnY-K(@:,-er+T+p#Tk:.;l5'Ui/JTZ]"8Z(FQQG%qc:7HEjiY?pZ$(6h=BGD3_M4g'ZbB%>B(21r<B]4WctB,].6gNa)Ac8R)!tSWo^`(Skg)DqYVbK6EsNI-[<;3*"4FG4t7U3h74LZ%:><!f?cmj^Dlr^KX%U0L]3;?T4'M\HgtV[NropAgj8:l?o'Q+p\j(Of?hq,hZU5rpb*PaY2Q^[nARkV\4T:dVW\,+ElLR*L]6`lA%g4rq,o%7'pOZ5#%];Im-[X.JN@bg>*05IVJ5:`\mB5pG[$9en+F1qN_DOsW?WELJ"BBI8QdT14#JM$t5>A^lT>G=c:CX_Mi!,PLq%F&6@fR=:R1+$TV$h^i%"CHoRP4`%erR-HrOpXP9VCG.p5NCEM0V/Rr'i6Gcmf"$5_D\^eA&*lIA%8FC<1;!EVgc/K1Om:[+dgZUf%U;FGB/&(tqGUIF3..qDkY%\/GjXS)1dP,+o=l43/%(nE!h7)8LZL3cHXN9e0Nc41W\>&2R=^[P@4<N]qOVPHK.Tk"eNF!R-hsDE4%-*R%1l]k4_MRIh6?WoTTHSXRJVe*GT/3%DX/Y@op'l@C1du;j\Tsj;@I,B7RI@aGA&k"&[W8qC\H`p]F6]J-dp#QNje>OfRlDl_s%%nl*S43kjVF]<Crh9WF\[.*a).TbR+H[01eT%aM+df,Rd56CO6(>eJO`6c7M#6Zi_46pPdIUV#K<57kdN:!Zia#<tJ3]H7=E,tX=%l8q^`UUJOZiP1<V)lp2G'fTL/Yf<k8b#'m2>2Ztj4Z@;W]^?jL(R!Oe)G4ps]YFK+(ur*,V:t*j*?<8)*6VD`e"Zh@Ec]i>$]:=6%;BS`Y?tMP-RQ`H9>9DeTLV9h?mcu4ARd+,;j>^2a6r*".*5D6l*$A&\$Z'*b(8U%5abD*=kjol-)TtQ[JU+c<mc*&&3S\DaDq`e*%kqGmoG7uUb74)F]dq9HHN'>`58UZ[SPgYPWb?(ni5'PXiBV)^UR#(`e^3151JcY[gbo'E.i=13\maip\MhSBgnTu*UhHuFOrW\qI%Kg'BR8BT3;L<c];C\jm107S28MU^<u5OVR#4I,?N6@CG,&\PfcJAaGn?gPQ3m!+Ilo^26q&*Wn0N8e?8Ml$^eH0hKNBqC/+;!f=V%MOeR:UC,D$=m7'lV=h1K4Z=#)mm>#..B=!Vbh&T+7ci+$V4KG0:j`ehTr?s@+^2k>mE$HS,eQ'J<k\BFlm\ru?rQBX-o+PEBNq$_%EnV&8aN<#pM->VhY",NHGHZTJcGJi6CuPMW\M)%3F2l(<fgW#&%tadH6`gXDkKq5@71Oa7?:#jjOp18@Qu>1qMdoHl%#`*,08g:F%.F8bpH%46P:.ePMEK+;G.UTLn3]#H]k%7]\r!5AFNAiK-ao:l4>qW#.X#9T?LJIZ.]rC\oKpnRISNXXjf!Vr]072WFXb<sgWPI)S%ZFX-+KUG>#AG\/KDaL]mQDDQ_Y[oG@?G5kr+Mh4jOFY#iMPcUm'ND\W&d?kf$D<[YDcasl$'Eh_/12Vb5_6K=EIOLSTWrb^6GZil%:d@._R[m>J1(Xb>#:K%jH!t'S@-:a6qY,8g&(l79T:%9;8^EdV4auB]0]$o:&+5GgPPBZHX^Sn$*^8T=O(5$9.MQ3B.Pas75#3/u%@#$KJ;an'Fg@`HpA3M]YA=X<Rm**MDqk3@U;H\%9@2S*abE]SO9c2&1%$iCt=s*MWguO`]_c5l*.GbT!<lM_oQO0u[F`,N(j@]")%86)Tn3LYVh=8>ar+tH1-'3E=8l6KE(p*!U.^m3%&gg#2P@@fGZYulf_U%%.lN'/8%-&cEB.KZbH_1S*mD!q$t+o,$jWLhqg\+%%`%b:Nk@7k\\Ajh=1+A`U+\;(Z=?I)ofs<@%'9<^'keH#0i*^Q;Id"[(@CKu.=E%7B6^&VlLeA$LGi4;R<Q#)t`&=2"USqd=N\LFZJc%83THeB>qeu^m/("&Cnj[).[*#+&oBW*"es.;lHr<B]O9O'bOZ-7U@'7,Epm6r7tW>U#bl>9/YP_),%hn"Y]@.GLPh92o:b?C"I.?%Tso\n]@3)g*]BBibG$Xcdm\Qu\F$i)C%K;Dk,pT]2tQt!mj;oagd/]<>5UDT#@5KC-%<B_O&k5b$GS^-GST/Rp4U2mX3#%q2f5J?%o6E8RgkFYjoj>`82V+4Z>E.=Y]!tU?$#UUAYNMD7`pRS\_jl/T:_G^IFa<"/`B99H\(;DuW/A4Sb-H%TBmG'7M!Vb[io->8L,dM/%^VPn.SM&13o-q13fjZi%$<Y7VD4:N=SUu^>NQj4]bSUHO.#:Z-=t"F(MTidC%K)WJbB'\,OV)7!jN<^L1-ki_LD^G!OQ8'Hds--L%+QeGmjTc@Rq79I0D1$T;p@'h]?N3j.IOhH/ba72#pt3(K`&R7[?S<.o"fX_44X("r]ij"Z55O,ZI;?"]WOdGk5/eE:nj:Y;"L!8P%_bCN@Ri)etCKPV=%@*2rO"$[*bh_=6o2X)q[hkK^Ha(*^^TM[`>.o7Zh:V4@_<kI?D4'>7]gYq?1-V7,N@V@_"d^%+4CIf'V28R:%"4"J8ju*`.G]02A9qZrSlhcol_]jIm%f`ae&-]fMAk7kTV+7CrhtR=`;sBDnHroJV@T2NR.=)BH"Cb<oOXVp'iaPjdG9^bbY*QOJ%pf]h/CGe2oS]?N+Qi(mlI;ZI"X6\q%p[*:)g&0@tGH]`7H[BYEo^Zene^@T3GLs1%c+E[t1Ja"_5?p35Q8jrs@$\A2)HsOqO#jmX%rTS5bmED*'2l]*Mb7,a%7N,sVgf_Z4]i-U;Q8Y<u9J%64or"+*4i4<C5DrH5DeiuabD-naW>4gI5`HAf/l&YRZg=*Oo@8-cqI/JU%^$U8'[JQ=&m)Jm=C&.F8Den8!DKn5b^(fo#YL_l?kPD5K03G'i0Ud@eX1&=_iZ]Zfd,MMq-tF12mu+1,ceiNbq(EO_o.,f7*8_fd%]q8IWR3s]RGMf;6*a9R^.k`!JVj?b.5,upq6kF(WhNg\'.$3M`KosCAo/3"uF6f/TIU9au+UPj!fiQHI53$hIo\>k4pIjMc&^lYs%>kdL3(rt<4QE%5g6l+N+ap43rWH.E]26SFLqt^%FEFWi_d=SkF->mWO.g"k&.XO)=7HMOu\*mP\`dsk=,85k)QeM$(erlcG^8l*h%f)nJ5*>!H*;J,ek8B:+-%HYhIf36ql"t;9,<hE?W8C)9YIBpI/P6Q!X"Igkg#=YKukLM;tE-\IW37-XM*\T0K[4kroQjI7RbSD#5%U=(YkE_09sQcDPO$M"&kk4aS%Q![;b\D6Xe4G>)<[(&TJ.Z820$5W:f:KQTAb8!LMnQ]")jn\aVV0)_)rK#)SGQ5)CWV#b8C")Y'%,+-K"`TZaL;(e0&P.c=CoY!Ci<g4r;(2cp+9OHARWse8qA,8"1Tn)\idLu><Zgq1=#NPKD^e,\lknb`7m=WXt,^Xt1ds2PMA0%W2%;(unll7U>f?]#`oe1_T]L^'A+qOS`Z@/tZin`gL!7bLlU%fJcN^e7#<XJLgmO>&(rU1+=[k<)Ac4d;E`-u4"'Q5;GD`JBr8W0h!5%&+Yu7)B:AHJt?*Z1]Ha+(M`k61\h[VWAUl]p?#4-h"8O(;7Q6Vrh-erf(B(rUT2?-AXff7)fo4^h`1:+_CUm\6,ZoS]]^*`:A;fj%[3]!f!COB*(Ur94)!#@;X?5r*]Q)6a#-c?P$,bpUR,t'cqg=N=q-:tFm&pUs3FnEtBUX@]O8H6WF`e#%r5Tt_9Y0e.;2u2>Q0T'T%&R^PR(paXt"=KXNi<ZkQX),3Z]>LBO]V.JC>6@o>VCSKW\O,mJAs(-t/uVc$5Lq#Y/6-:@CW^DA]ROW"C7/JYdi4e2@P+Un(g2d>%'tVleH6K4RCJNWbOX_t9:.hgLa*D5h'!X(VZQT+pY2?FMn(qF9JE,oMmMT-hLLUu3o]#$XK7<.CR%tN%$f(A@Qrh3"UBI^\JGA[K%J%,0`&M/OlU;OHnFWbuRF8S'qY)m3,AE._+-0laGg_'l1YVL5`8uuJn6,?RA]G2ifV)aQf>[a>sp&;Qg6?+<)"F?&/qI8+:XFc&K%b+H,R%Q%P[&.3rOLKP3geq&P^fuF:e=#2C^V6'tTbUZf6,s;1loEZtD<j<48,!uO]UML^$Y9I5f;VZXB\n%?D$d0dg+a>RY5ETT;%@2'BQ[CX/C3fMU/qS:OBZuML+:To:%MPaCY]T?QFVp4Vj`EZj,.`Rf/bKC2lAEAVY`_mddM,f6*&?V[oJXj)T:,4hIaaA@bVSWZA%Q3*#)<e[+GQ,1\;\K@rj&61\G_=["fDspaoj]31MEd/)48`UEj=`,Z%O/7hN22fu+'iM)7)3`BJM[GN)2WIjp1Pk+s^+-L0LS780%>[b!J(dmtIGV%PVF7=##Z.9H%Xf"@)2Jb0KJJ"/.JO[qB#p[>'R:mZd)VGsoWJk:+8+^NV1hmk1N17>J5(Q0][&eWmkl\JEi;RY;%=mVR3XRPq!k.O5C?r)+G2/=ML!IN8LY=5NG]E*B-gTQ0l@l@^jHM]SAjLu)UPMUc5j-Gf:fTY0@4n0!;Z.lI'Kt%TEPMUbJ>HRc]%?r)+G2,V,,"88DTf>`B2+^PmOX)e6VGZ><WU,7f.:qS96<fqk,&&kT8A@.69Z&J4Qmf2+a^!@F4&a?1dEj%)<jU)0AS2GY3Y?8TS%.5r=i?Oe!(2`j#_cTW7pnD!X-]&D`[gI?^Ji.Ke>4;H0-$i'no6uH$uSR2!ZY4pRtBls@"Y9E,hnDJ]'RU=7EZ8YVRI=<6KUYS1L%\@$k1<]ACES",ct_>fFC_:N[%/,GiG]2i5g]!h%[*rOAYgGA&KVO8?G74Xg]D>E\Q0m1r&o+qj\q@oNEI*4;_*1q0Yh:CPAU@"A/%N]2Ri(YC8X.l@8b%"8^>J&D;9jfSGhrp#u=^B`uAC!Np_#?q*EIQ6u#`I9i>,PXoUDKB_VlDnO^q32uf"$O-kU(7.Hq_39DpRrH*%nR/"J5["f[H:?-bLqInh^9/?!b:=Ke)n=HMhojp=/@T<fNh:NdU7l!%Vl1I;?0`P<gI9lDjX!#s'`m=q`%m4QV7Uth]%EfUe3'ZJ%\tD'PN_ek-ch8rD!"JG?`@J]:g%[\EL-b%MB3lW&@\Bin$,\IT=$HhZZ8H<T5qIOO/#EX?b%nHlr!?H%V3s/Z*!KS/Xq#YmN[S9:%`/>(<L[&7YQDq]n@'C[kKNU,pb<uUT-N*OB)m>qW*ob9s1gaS,'2B-!e-JYH9`VS#K+E+Y5W.#a/sn]-@Dfm/i"Dgh4s@+82Jfns%FhIG,0;2!'!lRL;Um:hFF+B"*9.6^c4m-W(Nbu9u.3!VBg+a0&0+kLD:DnTqU'"FZ`$,5d.FWF(+q>=W*A[m41^-\>Sn!O!Te>@Z%(>j./M/R]`h?.$J1_RThDce&I>U$W@4*9A&OVJ;R2t;c8(tce_nNO5Z4:g&(m2C8rJoNJf@b1fH5u\O0@Oku)A6Use,eIL@cjrVk%R_Tra`$ZOM`rjF3jpMU60lUZD7_-<<0JN^',lhD9XhJ3g2Y;ASkG%1G,_lCYJ.#X7i40Ws`\\[pA/Z'PfCsCH;]60A+NpTBfQ[iB%LP8FdRo#5[(+fup#B[b<+Kc;B2FFHo=@LDG:M@3('%1b@63FCT6:64L1T:\^b;Y7VNe<mFJLJHp%Nu*'ONVOR)FG&TV?!utj!NnJ%#;KN/q&ms>OB2I8#Y=GAEiX!M"+ogr):u9t3/Agm[,C/F(Ba2L_<J[4"Spr!D$Vb\:\7""V5#9p1BF?n82S4`7]L6IdBL=B@9it7%HFh?K#@>!Ekn@bJnT56&U@,QO+Y8!@/ks!c;.TPI!!t7V#_<C2Yd%?WctF+MW=T'+5bo>u*Z;lC&Igqp-3?#7At9ALoFeI*,m!cL%WXLfd[1n_@6QZZR[.&K[hj5PM3I!TH6:$</!4%\fbn(.MCO<5\TWSAu!1MHL5b=]J7/>gU1Eab[1n%gjB"G,[4V)+^c;[gEYaP?B%ED)D:,Wl-MPTDN*%%D2D5CA(`*e-_5_B-oT0nGG3QHcc<#Cq'*D08GW'Es[CMDSmBkrL44c#k>)4t@btgq!Ng5d*Nt'1ut40&u$E%%DCtWFHj+dlEOW!&Vmsc,0C@k$ts3Z2p&'cOWjfOKfJ2ta=b&+!lVA0-rWG*QNQ.X_Z7Dn!YG(V[D<4>*2X0a7%2:KjgL+c5j(fD%3G9QIV%&r+a@JQ7Qe,a#INW('E?]1KJ*aB,lBY<Pa+Ep<'n[2#""6p*Du_@)LR81F'2WmN9OU#Cms'^%JdA:Ratbqk4qhaj!,.F$%[5Nnm]3G=Apfi\<"r,.]4uO"Iau!NtVQ.&?XoME+QoEDn@P\l*PmK4l5tMq".MDq0Z6pGfG\Q*4&6'!%#V$,nK$$K@C]nbc3W[Rl%>Y^]c!HIZ<3<]E@9K*M^0Fl8`>ZFUg5SM=^<'_frJY7lE5R8hn@9F*T8L5EZ:b?Gk`"I1J0Y@r"7VhfC#mZ3ll\?t\;"U-TQpS^C%et#'"_*aluX[#QO5TlpL8;J]OT3^1Z`"Z2:HD[Bn.;7LW4Ze`t5Ru[,'tFJR8#e)G7,TF(;gg(SEXMT#6krk\2VEOG<.X!;G.=Rc%"Di!3=@K2is+?J([K38(D5f>ne(>h5/jM!lo<tPX/NUCBRd')\OA9tu66_>36ik-Rn<p0ulIKC\1I"-V,+XU!_#]Sd4\M>cNeIt%%0U2+UZQ3p3lX4Tl^?6u3ZL35_neG)+8$cJkEQN(Z!$I84#nkgpmJr5h`E^EK>iopEEu?-iYLq%J;nt^BruH21*FI>/NeT>^0tmcY%+`\8'!C]:YH`!ptbuiOUHrmTJYT'b.kgFLkYum<08^ePIX(b8_ZJiDT*DKaAcNs#jFOGQ&JA?UD5hplZJ.4?%(,TIM8'*#NB^CWd%DRd'IM4VGVbV$p=je06NC_Gc/AlBBYWn%DJhK3"(#rkIP&93dS&TS-W4Q`;`kY,3l&p++P$-&ta1?nj-"F9,h!R1XTY$nA^#9Dh0%]'_([J@S?D7NQ[BRn[5r4Wm;%9nUJ-kgD<t)17Nr+Sm3Hb-XTmbd?^r:_8."OH"W<kU$<EK"t%6Zs4K$5_+X(164`b5QjmSFW#nK%XuM0<6m6Ys(+ai+L*7*W[]et?(`IlnQiJPg>q`DhO@#CJq_AeXHY<fN[M"GtG9#e9-"@MfJ-R<@ZB?2#M+1$tJu:"1$(J_c$(rHX%"$,bd"E5sCe'WS3JF9@V3r5M>e\9(B83(O;M%>3q:o14R_[$F4YXU;]6ZO)uSfO->^;bMoJ97TbTo*E#egq9$63S(fQ86>d*UQKg%]j[6:N$G=IXonoQ0u1[#6M?(_"K`O!.G1ff`dsB;6l0;t5o5"4$o%EL%'KjR7=pc,l4.n7@mGTu_$>D/nmXm_TGor3b:GR^'R1H;%1l@<q=g9)`L'A1.J:`>Ba+sg^ch[D4L&AoVg`,f9)@ksefG9B05%=j.,DQQO0WJc;-0-"i9ljEClV'esf+uXM\@*BiesI#!CE5JI%f/Ah$W9OhZd?`,F;L$Un4[dma.]?bU#-W.bU?)lqJ@$RiFM$'^&0*4/l,-a0eH$GVc3=M?c6*B7SIV`Uf45T:CQ8"H`^^S:/=qbq%JH+S\ALOauoE:4U?F/L_UF[N>#nd,Lp%;!PH49@*/4rX:jVchI^t4_\MIV8,9+\C5CiH"oQQilV=#Sd6i*h0;8//SW_.Z@J>$R+J%>^ul>M(ce)da4jg9*it'Q*=Q`bb-o/c.]BYi%3UuC'I-8?5VVX@?prdao_ftf@2_Vp!JPJ^OctEY"2?M]Z&O(!u`9>]#1[V>]-c#%<5j(kVE;!lhBA?gH:?O'ru1/[fN/PG+X+Xt#5/,+0GkB=TVZF;_ZQ%an6T%s^_*jC?nT$V7XX[h@$m\aBJL&@6\ilW)S)N/J@,0O%W/*tL(smG>>&^2'!4fn@Q]P5JEFncE4Ojrs""=Y%QES,("1"(?s."-bSF.TW8V*YR2Ag)ZU^90h/559(A'rpp"[R?La[p0a==32o%EX=nTj&ZpC2-e<@G6)'B_8hN*&puVc%k[tCr@S>t"aj$JYp&srP-Qnk-O<65g0gJ,-NqBJTj!e.%<1]5@+KjW]1>ifO^VqX1l,;^%gBT932IkS$!ehR4X+5`+Zru0$rAt\re/4Y<@$c]8@(<KF%+Nj%XFNDSYSD[4(1)W4KCUWNhOmFsFa<0/MT%b>hbr2c<q8&o<F@Qa%Pqa'5N(OE_KHsgOAF\"HpO$LVMOdRjV?+U:2RKH)`0!6;B>N?Rq%Zc[n9f3b3X\Dg@mr5t=KLB!@Cj\>E^@b@fX/Ka%bECI>T=*m%!dUoQCO1RT0XKH$!mZ(LVNT2o<+7Z<'%Rp3_aKglPmi_r")"p]7R;I,U`Al'OP?2BNF=Q"jHDsSB)Ien"Mk8tPD)k^:fQ&Q5Z(Y=%benB6^WEQ@O%5Q?"RSJ_ldM667Ge@+@$LSJ;dGV*#&,jX5)e(skF\kpZ17-@Qjh>GhF;UeP5NqZgB(1(jpi;aH%!&m8ab<(cN;fA%#"i^W3Z+>5JLjq1j1rBI(ePD8@G+TdOYd&W<u<"d5fCn[J@`WF!),nMO$n//*c!SR@X2RuCD\+8>WG<YG8+HmV@ej(E_T%Qj.f#H%R24e%A5M5#.2eaJ(EKs&ic$i_70,n^=b(gcb=*"6MZBPs0q8NTSgK_<;_8h0[trZ3+>F.7nsMaOIa8ELMN972ig2h:nj<Xq6&K%'%No2Vmd$a/b_q>0:%pG1i>.,9_Asma2f?(M<2/7nm%/;V@6OIWN#=dko3JBoK\b[]I,62[!b^=6\jtZTA)_p2i=bOu(A^C[7_&.#(%TN2%Z,Kf!81f-"U#auTlnt>59XrKBV+7eDG+I`T9e>E+/b(F.?0qb1fk)_=HKigeI7F7@<\:XeGBWTiMM)LI<3a*RGFb.IH7MnCX%)A_!M^r:Q_(`&Mf]E/*6YL;Dr#lue@J"s\hBOpS;d&uT#'uU_:e7jA.`5;0N$gV2_!HILG:Rb^dDBlE:%lu]?jN&O?^JgnWFFu8V%n^+f+nX-4_"a((N%)D&t:kCNm0c%trglMTfO;Wta"'I/]^rVP]VPPgGe'Yrj'\)*G&=NS%8/*1:k:n6fGAuiI@q3DS_LsO#3Ye*Y%ZLMaB<$&UNXt+1G_&RRF'r%IX^l8DckicMbaA3FS!eUDDO<?TQ',^S-'GXnPLlUntkGi)iRi-N;FpS_%(B@$Of4HOAEd1Fq8A`Oh%/3`9='AB2mVXL0g(Ng"66?ifGKQk4h"6gI1("[Ce:Sg-*-om#[`:M[]&P70Q;"2OlP3u/)A"h_S%SbBBL^o`6JJJZ5a"t[Dd*@6$%QFsGSpn1DK]NC7>;acm*+KG2aWu>%F!b:!3ck4/-F6RPgg86CeD*nQfREUrV"uh8`$s\N'(,nYuFD;$)BM`&)(WJ+FDF=0Gl4c^t%@=VWkHb-k3OCJBf)^>?;jm(:Z#1EV)?Zg(+#68I^#9[o/@k3keHsGY9N&=`$8-H@[G21M.K,`^&NpA^:bH10j8t+W<LtgfhJYTc,%`JnC%*)MlNm3"nPb8BI9gTEBM_$WQic')0fp78Q61W/<NQlV3RY)=2aRSPnhc,:0E1rTcZ</MXTLhFn"rnuA;!NM%M<LVstYg9\C%9c\omHu;V#!d2DFQ3N&A*%SP$U"ZcI;3%.L3l4drE^QUe%UkU^-*s>U<?;.9=Y<"W/k:pIqc[+aOrjeT*!rHG."a':(\IZS<uU6]%2?S.@"P,S0('Xd06.k?$J1Pg8P1rbF`2n(!&B-#N'oi:=0J17?8!Y<>1FN?[^;6mZ1=^A,Sdp\jf]kG.^))b>#8l@i9kg[JBI3L'%,,DX'2qc*"1bHJ/fCH[tfFV^JAm=4I?rig6U^?r8#=BYm#Lkp9j)7g"%#4J7anX05nch);/^h6H7_T;X?68P3'5d]5/)Pr+T0IgN%Bfn?Co+.D3r?K$0`E^Id&jQN1co2=745c3op',N0mWHM;ncN%I[#^)&TpUR#`\C/--bk7+m(a;f<b&`_S)$9,Sc$HJc:$Ne%8hib%;T<bT\0k?O%%QWAYg&%+:-(1>bBG2>>L(qTXp:*I"%sIWTn@4]"H&Jf_erQ;qdacFa$PC_mS74WDOaL_$>N.oDTc_$b9KP4+QYoH%Aj0?;aM9=ZIeYB@rfae)KGm@@eG<>Z@*5c:i0leJ#?.3_M&WQm^i1nV/&ViT0eckF&2;e((mslq(g7>=km<_>DU<#;g\8cXL!,d&%l$2P">;l#i12%a<j$=k/cZMr59^06<2?noE!iZf[f'^-qd`N_$0%ge&!XQ:2(ckB0hsjD:U#BJuAcQ=Em.P<F15_lckChq*h@4q]%?1OjL>k9XC[Op<S4PX0/)_QA7lBHk.8_sG"4Rh-&!.jh&de!RfboBgf<Nh<$!8aR63Y#j9K_FmP'FTGopro5ICPn1(S]L16!<MFY%]/Q[#=\@jj7csj_%L'^L*d`pb9GTj1&^7YX&68tGrhN[Ke9=kN`>Po36sg7O\kRqfm%BS3('eSn;X*2p-*LTZ@UP"`1We]:0P!fn%0Kg24Q4P#9O6[%I/Ae36+Zkn!Wq5L\>qDiabZ/(''kUo6&Af6'@j&Y@$GeQ:LKM'!1N-["*\K!=&<,7_P8&F7)@/CH\9:+s-^4Ua%NQ9JWTd:h;+BL"">&<:e<ZG[(iV"+uIGZ/(M\Sean[Zc$lpGmrmMR+gjosh+=;*8B=U)$c6a.X*GQ;a&%L!$uE%^/CJ9C)aAn#T`%#\RhN1+:-=m'+I2kbo2>8>F*4K<OVaNG4X'$qA]?^i7/)JuaQ413IIA]"!iWdXZ<O?/^Ta,Z;2A#p*Us%hLW>>Z9tq$"2h<Z3<mK%dZ21dAmcdRa_Sg9dRY80`0J5`-Jmi06k>Siq<%WXR,mB06i@RQ*u7F7N9V`&?c5X*:i\!WL#*eHf#<`-0\B\!K41R12?k&%,<+;L%2eEYT$$7jOR8B(d,m&lOHpn3NTX0E]=CQ0s[ED^se_!i/E?Y]&)dG(8K.$qKB)u)4)3&YAdgLaX8+,RQ&@'+cF#%E&\9uCf^a1Mg%2J)FG!_<Bumh&2j,4k#]-)@Klf7>=[BI5DcpHsJhTTFldfUNAW;[>%]HEI<c&J:3<8+%0#?nPr0We:\&N_F3,i>cLp1?q:o?O:MI%0Uj\[c;BWS5&YODN-1Mm["'=<AS#P@bA/`DmrB%MEcVEM@$4+Jfok>o5h,c?R+bopHE461Xb[\-4b0p9b8K3G\?!ml?X>3=P>B-5%>VA490JLYV]8Nc[X?^#+NKlP]nJuY6Va=KnaqQY$QZ@dRe!1<l#29C(+XZ)&-*'9W7PT)>OFXRF0'eNK(%bk_'H*$l^#@g*2BTk.%",JURiu(2BC0Yjg0.];4\b<sIJJ=@T9&Ypk,D2pDJ;>ob&=Y,1TH7>id04PB'loWKq@o0WrK]<p`tjNQ17=kqRpEXBlQD)p8BM5\%=J[\=IC#.n\5SH^8QRP*8-=[@$*QTl9fA`m<d#eI!8_Y9,O.7?R&VBI3&Wg;/L]T3*&j$aZpcB2;3u2a;9B`mP`bW0L_sb)&Tj--%86YPl'RIq$"D)h=AM*2'U1OSKc4-a@EVlO`6lK.$$A@jQ@PDgs,;<^_U>\C$n_?Ckd3R.'g>f+K]XV[8R8^DMY7$X.p%Z+c7sr5K%*<gB'Ggkd27\9p0YU1-jpFWi@7&eoVWa"_=Vm%R"jg.RYFs@-04L&rrJH^YQ[h\q@&*>TeL1%NtL\eta,XRmdRmKqdE^M=:cOQ:>%\4UhZ&DGIPSdLEihBU?V5N?0<0*<'W-17Tg6TsoYVT%&6;SE7*+hX$kk,7EU!"o/<+A/7CDtZO$D[)ZNcn+-g)Q`aI#1HOR98*PH%Uo(EAX0FA1j,^a!(Ylpf&2t#[El'*M@_>PG3Hgdu(#_Ri<,,1,PV.RP\-LdMdEOomE0E;4EA&-gc-hS]5;[7$8I16+nr_*n2Am&9%Edk_EX3q<L^bbE_hqFa=LgR)LU"Lu(@):e!_D_O(Me'jXV.?X>*dR,[HW5RLSAAc"Nl>MeZ8DZnUD4g;9#so9f/?\eI:EY#5XRIJ%i["c"'q!0rR][uj)S&lcX#*c]L;u.u_F,9Z#^h-9'#^O7bWETf/FHjIWj!N5J`NWg6$\s3kNH"<AID[:kB8Yt=p3l#6WC%3i^o?[%Eh+2!EQL8c?!gG3_g+/D#2'2Z\MUJ,q#5I'&dulEFq@obK`!XEMLubY_ls3%F)+5Y$S"(!%WPk(^uSO8+&sSi"pj^[X.O*;K'>)r%Bb<`H]SlIC=C",Z>dd&;:sH03BQl)\0"cj1/taG:njog0%_ZXu>Zoj0KmpRe#^89;el#p'j%k3!m6V3s#BM`a+f`l._/+!%,>?%N%.ANJ+5hG0MU;DS"[l#%:o!D4P>Tq0g=ELKiI^nU6lAPsr%Qnb4$f#bZKMBE7[s^/;KM-3(^(-ZMg_3$-5lno9h,7O!>:aefV]>H"%=F;V(F2>h%>1G4F<ECR/PhWcgopF3&DcNI!fekZqbLR!Zn<=gTQ<Ud7Kh!jW,oXQ5#%3qI+ImJ'IGpEKC[RDl`!N-Ph_Q)/;VcBp%$bUE$'rcHkie_5@"m3-C-Gi-Z23GX$4ELU$4^L3@?]d%iK2tZA<F=SEC/jlV"\a1#\AhpUf='I$(I7bD*l<$/$P<M*SUcC!h]/Ne%>I<5OlX@Q+mYX7Q-e5O1j&*`1_3bNEL9^!%>f$+aYumPc`X)G:N2>5#*Tc`uOBgT()ptlb^;_??Y#sNi@"EjDR[NH"K8D/f+dgIH%C"[m^,O<fJ);H?EW=\3r1C=8]>h3h[a*P[H@&A"$dN=7ja&n]a1&<:`SE96#:]0?/\qn.jKXD**EU<2M?;*3JBIZ(f3K[7^%PeJV%0n3a`?`[+\4Q6>R?m^E7@LJLBQ^Vl2)W^BKlj#jJV,BdSaXMiH5)bKI-(a<35\s_DEXH2TYe,^oD4^Ff8=]:R'=?2!E1F6iY1VVT%2DpZ0CN7<=2^sU&5lka5N0c>P,sT\3-=[VPJK%k#+;(eKQ>sFn("B!D7'9eq'@*6q<K59_dYd-TK]lm`@bD"8=D[ENU\(uPOVc'@%;1skW3=`<]SV:/Zd[d:VZ:W;TkDD>*[tR[6cj%o^-G<=mY%n>CfQ(1ODBX3K'3E&88Kj^cK*BU#<1uLn=/ZiD;d6LI[UuI#faj4k%EH+Q)%$TG'2V/*`%?rG+#T.lK,#2ZI2D"]poG0!oOr1CL3"?)Oiq>6*KjhoO`>L@jL\,fkiT;eOCG;---h*GX=GX)9$muA/Z"nU'%XCB#-'R=+:-X]dg(UO$k;Bg^J/4pf'&jeT]CiT\5KpKFaoJ&%R2ZfMi_'I;@Y4G(=ddl&oGZJ31cecO+N@(`%E_LF.T2[6L+0dJ"%kQD=mFWq>_R%DoOmY'86#G[u\MWc2$C5V8,mY/[0MF]#(e.stQ3J9h>Hm.2uCY%[:iWd)aN8cND?O.;V(2%*jG#6>ZBSPV&[,H.8%hJhXP1BYTHS2\\(4lZ&r(qjL<8<>?T]dY_7#e(kQ[jGR$S0iCjI1&tF7Re[FC`_,S-9<iI?,0VPAo_d"Hf0<J:mkf6HcND:+a91E%C)^n*Z+q_TIt&"*Hn'M^:II2JE=We:DEpMDj$(5SW*RP5N@8FuWGpHYPgVEt=E3H(5brF$?sG^%m7p24A,A_d3Fh]u<0T2!9b/]9%!"p\m"icf``HW*Y9NtUN<F)s+&`\1?8f&P[:sTCjInD2'*1%=9cEtnPUn"\Q5GXgK#L!:8l5@Xg:_T)afN\3:RM6$oI0tq6BA-H*%;U7b?LjGp]Jg'fGj7=#Y/?T*J/0U=8Yo-Gg15=c!),Y8WYU.Lq3EMt<MHl+f%2Qr]3*-o\;E.at+XH71RsWp%<uP!2"MBY22);ZZ%a\*KP2_tjFOFVNWR,D8/PZYTuX@h:bnkX.PF\.s@cIM<t!T5\+!Dtg8J-jNO`@R9ZBo#b0Km*tVU9u`8`+&n$G7FP[$^H&J,@YPr%-kPQA_/k?5NKAO%BG"!NOYMgIaYLB"<or,p>4AYE#d-$u=1)RA6YH+.^p"%#-QFhAi<XQV=B7a&V@?pbD%0G?2(X@B1X3`Ba*_s@%LHI$@5k^t698Rin]94Wf(2WK9+#S@TP$4Pd7PT58l&R`jSo>$"(>`XW*YD7W^<lMgZ^*&K'.GVp<mR#G'YSB5&mI.Dia#b%H"dQC%%Z^ZI\_L&R1jhJ5<EKqoTiDKD'YAjj9bbBr9gm-,`2WP2.R.Ag!U5\!F;7:3-L>ajqiKMtfL.WalULA'$]K.b#d6,9+sNZ8%.#.M%Aq>$H&HOK_KHimU0-"M:%q5.ZjlaHMT"uR%,(o!SW:gdkmUej6g-!;"\5\JmfK%Tu&[@(daeP)`e51%:kn@l"@lOa1+mQ,+>!ac2%audP`V$YlT^R\ZRDBh(OquZhL/dATh.,YLU6XC4<:5^BQ*-)c6AJ7>;"5?@q5HO:Uk/]=t"FIH0RKjqZ=*IZ$XdpA7gNPtt^\-GS%g6_,l61SpNr[pEt%5G3_.^urijgpm>`Et1\Zgt))5q9VnNI?B^cnkE>_kYA[.f;7XX#h&.*o*<,UK>p<84'";Q,%b1.c>c_[I`=a%ZP7mo'Bo^4+=#`=?]sG`n$\#0I+4XBcR\G/!cZ-'Q5_]\,OQ=lB!JM[itQRh3UTf%%P+G,h#=M4Wq\<,DM=PV<_6MD@]L$K.NX<9%U$e+$*G\T.Rk6Ni&]mTVKG:Uu`bGBC^ASD4+\a$]CKtq[rQ5#:h/Fa];3#qT;AsYsBYpM11M],8n&#e'nV!g)V8!CIJteE^#s.`l%r;(YgNZWR1c,'k3H07(>DO8)sSl4cXST4h5i#?!Hs8QD\gKHu)@:]&EinuL=F?:)[]a*PW!dM3?^>?H-[Vg;("cJ$)5;.;;.FP7:%Z:LaGj!fV;dKa6`J1RGrHVO@i2(sY"S.\.gI`_Q+Im;qAk7Me(D,I4:#<7@rj#<,\MIdO"aTA)qLI.-IaUSW86&ECu;,',26tcM2%8_BiX"DT9\k)7?-K9U5piBeEeIKko(O*Ilk,8caLW8F=KInddj#1dM"%ML@3h:>/nZ45=c#tgTj*[*tS_;]-]emeLY(h@n0L<02=%9s_g/MsX>q_19==OE)kUOf%FuYrpWT&_CJOU4$I^371?\on+$BQBmn)PJ[L@_pEPNQj&b6ehHEQrc"fm>/El*rA@N^\*@el#5"nW%"bnI?!>#[(C.o8Q(+BlDO,^\`UBHKFc$&AV(aGYiZ546m1T]Y=[(0urJS*[_UEbT=/l9:7TrT5JNRG%O0GVF1,C&n[&-'bIe^@iV%mqN4LGW=,_FX#'m;YFd$=]2-^Q:Z]X0SoH)6X[uB@X6U3DRs_3E%PmC,Ga#$?'RaQ8SG[FPDfs7V[[3ZfZ#g,^NV"XB[8TGmCdkT%3/#V.Q(Q<D2n%d@@9.3b1b/42aKqm:"P_t0"fNmgP"Fl6?t!OJm5,>*]['V="b@.:H](?fib[hP[Kt.lZM9?S@\e3V#KF:;Ve-7t%?pYb]B;eYF5X2I"a@sE0^r%oR=#>$RChggR=I6iegQ5C)WAJJMn3Z\>096l$Qt5A4=%uBF\L"d)iij:W8J7Ok!h%i>ree,7s&Z>\%<u=+@cg[0e@`W%[dK<At3k%PpY.\-r1ArDE#^EG7fkkUn-UoE+TOf_Lm2Z.<4e/H<$Gj`Xfm-6-0+J=CN@C+GJFs7NeeiCAjq'SI%i]AE.FlX<AK.7Ac0+g=&Ao?`4TV:6+.mUDg%Ekgt?gk<i@92MUV2gC$Fko!]-FlBr*1:[+"FO>N.o_:c2A_Vl.ii\p1AT&o2_;9i%(tKI_$b'QpeBFEHK#&YhnA)H).SL(h;0<\e_NO_Gb;f1@7$raCqdtHa3pOiL7+5n-4r6bT'YCspq(a$k#52OR-5"XF"fKdl*O\uh%+GEW:hR?uuh$MN)qTPN_8J(=$.`^*qmb=L$92JnN+Vsuf9`Kd:?T<KuI.uZVj$tfhq&MZUIeieGJ!K3Gdr4g+3N(?bmdB90Qch$8%k<H/:Qc#0AoA>npq<@/>mJM/'X+/SWYF!kMkEjB^ooJ9c@-P/io"2M05Q,Qr(S^fWg]~>%AI9_PrivateDataEnd